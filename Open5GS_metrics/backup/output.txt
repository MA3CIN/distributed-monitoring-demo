NAME: open5gs
LAST DEPLOYED: Fri Sep 15 10:13:35 2023
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
amf:
  metrics:
    enabled: true
    serviceMonitor:
      additionalLabels:
        release: prometheus
      enabled: true
      interval: 5s
pcf:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
smf:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
upf:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

COMPUTED VALUES:
amf:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    guamiList:
    - amf_id:
        region: 2
        set: 1
      plmn_id:
        mcc: "999"
        mnc: "70"
    logLevel: info
    networkName: Gradiant
    nrf:
      enabled: true
      sbi:
        hostname: ""
        port: 7777
    plmnList:
    - plmn_id:
        mcc: "999"
        mnc: "70"
      s_nssai:
      - sd: "0x111111"
        sst: 1
    sbi:
      advertise: ""
      client:
        no_tls: true
      server:
        no_tls: true
    scp:
      enabled: false
      sbi:
        hostname: ""
        port: 7777
    taiList:
    - plmn_id:
        mcc: "999"
        mnc: "70"
      tac:
      - 1
      - 2
      - 3
  containerPorts:
    metrics: 9090
    ngap: 38412
    sbi: 7777
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    enabled: true
    serviceMonitor:
      additionalLabels:
        release: prometheus
      enabled: true
      honorLabels: false
      interval: 5s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
    serviceScrape:
      additionalLabels: {}
      enabled: false
      namespace: ""
      scrape_interval: 15s
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    metrics:
      annotations:
        prometheus.io/path: /metrics
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        metrics: ""
      ports:
        metrics: 9090
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    ngap:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        ngap: ""
      ports:
        ngap: 38412
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sbi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        sbi: ""
      ports:
        sbi: 7777
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 600
    path: /
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
ausf:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    logLevel: info
    nrf:
      enabled: true
      sbi:
        hostname: ""
        port: 7777
    sbi:
      advertise: ""
      client:
        no_tls: true
      server:
        no_tls: true
    scp:
      enabled: false
      sbi:
        hostname: ""
        port: 7777
  containerPorts:
    sbi: 7777
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    sbi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        sbi: ""
      ports:
        sbi: 7777
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
bsf:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    logLevel: info
    nrf:
      enabled: true
      sbi:
        hostname: ""
        port: 7777
    sbi:
      advertise: ""
      client:
        no_tls: true
      server:
        no_tls: true
    scp:
      enabled: false
      sbi:
        hostname: ""
        port: 7777
  containerPorts:
    sbi: 7777
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    sbi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        sbi: ""
      ports:
        sbi: 7777
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
common:
  exampleValue: common-chart
  global: {}
dbURI: mongodb://{{ .Release.Name }}-mongodb/open5gs
hss:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    logLevel: info
    mme:
      frdi:
        hostname: ""
        port: 3868
  containerPorts:
    frdi: 3868
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  dbURI: ""
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  mongodb:
    affinity: {}
    annotations: {}
    arbiter:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerPorts:
        mongodb: 27017
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: true
      existingConfigmap: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraFlags: []
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: OrderedReady
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        limits: {}
        requests: {}
      runtimeClassName: ""
      schedulerName: ""
      service:
        annotations: {}
        extraPorts: []
        nameOverride: ""
        ports:
          mongodb: 27017
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        type: RollingUpdate
    architecture: standalone
    args: []
    auth:
      database: ""
      databases: []
      enabled: false
      existingSecret: ""
      password: ""
      passwords: []
      replicaSetKey: ""
      rootPassword: ""
      rootUser: root
      username: ""
      usernames: []
    clusterDomain: cluster.local
    command: []
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        imageRegistry: ""
        namespaceOverride: ""
        storageClass: ""
    commonAnnotations: {}
    commonLabels: {}
    configuration: ""
    containerPorts:
      mongodb: 27017
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    directoryPerDB: false
    disableJavascript: false
    disableSystemLog: false
    enableIPv6: false
    enableJournal: true
    enabled: false
    existingConfigmap: ""
    externalAccess:
      autoDiscovery:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/kubectl
          tag: 1.24.3-debian-11-r7
        resources:
          limits: {}
          requests: {}
      enabled: false
      hidden:
        enabled: false
        service:
          annotations: {}
          domain: ""
          externalTrafficPolicy: Local
          extraPorts: []
          loadBalancerIPs: []
          loadBalancerSourceRanges: []
          nodePorts: []
          portName: mongodb
          ports:
            mongodb: 27017
          sessionAffinity: None
          sessionAffinityConfig: {}
          type: LoadBalancer
      service:
        annotations: {}
        domain: ""
        externalTrafficPolicy: Local
        extraPorts: []
        loadBalancerIPs: []
        loadBalancerSourceRanges: []
        nodePorts: []
        portName: mongodb
        ports:
          mongodb: 27017
        sessionAffinity: None
        sessionAffinityConfig: {}
        type: LoadBalancer
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
      namespaceOverride: ""
      storageClass: ""
    hidden:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerPorts:
        mongodb: 27017
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      existingConfigmap: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraFlags: []
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: true
        medium: ""
        mountPath: /bitnami/mongodb
        size: 8Gi
        storageClass: ""
        subPath: ""
        volumeClaimTemplates:
          dataSource: {}
          requests: {}
          selector: {}
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: OrderedReady
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      replicaCount: 1
      resources:
        limits: {}
        requests: {}
      runtimeClassName: ""
      schedulerName: ""
      service:
        annotations: {}
        extraPorts: []
        portName: mongodb
        ports:
          mongodb: 27017
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        type: RollingUpdate
    hostAliases: []
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mongodb
      tag: 5.0.10-debian-11-r3
    initContainers: []
    initdbScripts: {}
    initdbScriptsConfigMap: ""
    kubeVersion: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    metrics:
      args: []
      command: []
      containerPort: 9216
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      extraFlags: ""
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/mongodb-exporter
        tag: 0.33.0-debian-11-r9
      livenessProbe:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 15
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      password: ""
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits: {}
        requests: {}
      service:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
          prometheus.io/scrape: "true"
        extraPorts: []
        ports:
          metrics: 9216
        type: ClusterIP
      serviceMonitor:
        enabled: false
        honorLabels: false
        interval: 30s
        jobLabel: ""
        labels: {}
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      username: ""
    nameOverride: ""
    namespaceOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      medium: ""
      mountPath: /bitnami/mongodb
      resourcePolicy: ""
      size: 8Gi
      storageClass: ""
      subPath: ""
      volumeClaimTemplates:
        dataSource: {}
        requests: {}
        selector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: OrderedReady
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      sysctls: []
    podSecurityPolicy:
      allowPrivilegeEscalation: false
      create: false
      privileged: false
      spec: {}
    priorityClassName: ""
    rbac:
      create: false
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 2
    replicaSetConfigurationSettings:
      configuration: {}
      enabled: false
    replicaSetHostnames: true
    replicaSetName: rs0
    resources:
      limits: {}
      requests: {}
    runtimeClassName: ""
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: Local
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nameOverride: ""
      nodePorts:
        mongodb: ""
      portName: mongodb
      ports:
        mongodb: 27017
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      name: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 30
      initialDelaySeconds: 5
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    systemLogVerbosity: 0
    terminationGracePeriodSeconds: ""
    tls:
      autoGenerated: true
      caCert: ""
      caKey: ""
      enabled: false
      existingSecret: ""
      extraDnsNames: []
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/nginx
        tag: 1.23.1-debian-11-r4
      mode: requireTLS
      resources:
        limits: {}
        requests: {}
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
    useStatefulSet: false
    volumePermissions:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 11-debian-11-r21
      resources:
        limits: {}
        requests: {}
      securityContext:
        runAsUser: 0
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    frdi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        frdi: ""
      ports:
        frdi: 3868
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
mme:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    gummeiList:
    - mme_code: 1
      mme_gid: 2
      plmn_id:
        mcc: "999"
        mnc: "70"
    hss:
      frdi:
        hostname: ""
        port: 3868
    logLevel: info
    networkName: Gradiant
    sgwc:
      gtpc:
        hostname: ""
        port: 2123
    smf:
      gtpc:
        hostname: ""
        port: 2123
    taiList:
    - plmn_id:
        mcc: "999"
        mnc: "70"
      tac:
      - 0
      - 1
      - 2
  containerPorts:
    frdi: 3868
    gtpc: 2123
    s1ap: 36412
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    frdi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        frdi: ""
      ports:
        frdi: 3868
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    gtpc:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        gtpc: ""
      ports:
        gtpc: 2123
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    s1ap:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        s1ap: ""
      ports:
        s1ap: 36412
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
mongodb:
  affinity: {}
  annotations: {}
  arbiter:
    affinity: {}
    annotations: {}
    args: []
    command: []
    configuration: ""
    containerPorts:
      mongodb: 27017
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: true
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: OrderedReady
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    resources:
      limits: {}
      requests: {}
    runtimeClassName: ""
    schedulerName: ""
    service:
      annotations: {}
      extraPorts: []
      nameOverride: ""
      ports:
        mongodb: 27017
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 30
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  architecture: standalone
  args: []
  auth:
    database: ""
    databases: []
    enabled: false
    existingSecret: ""
    password: ""
    passwords: []
    replicaSetKey: ""
    rootPassword: ""
    rootUser: root
    username: ""
    usernames: []
  clusterDomain: cluster.local
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      namespaceOverride: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  configuration: ""
  containerPorts:
    mongodb: 27017
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  directoryPerDB: false
  disableJavascript: false
  disableSystemLog: false
  enableIPv6: false
  enableJournal: true
  enabled: true
  existingConfigmap: ""
  externalAccess:
    autoDiscovery:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/kubectl
        tag: 1.24.3-debian-11-r7
      resources:
        limits: {}
        requests: {}
    enabled: false
    hidden:
      enabled: false
      service:
        annotations: {}
        domain: ""
        externalTrafficPolicy: Local
        extraPorts: []
        loadBalancerIPs: []
        loadBalancerSourceRanges: []
        nodePorts: []
        portName: mongodb
        ports:
          mongodb: 27017
        sessionAffinity: None
        sessionAffinityConfig: {}
        type: LoadBalancer
    service:
      annotations: {}
      domain: ""
      externalTrafficPolicy: Local
      extraPorts: []
      loadBalancerIPs: []
      loadBalancerSourceRanges: []
      nodePorts: []
      portName: mongodb
      ports:
        mongodb: 27017
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: LoadBalancer
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    namespaceOverride: ""
    storageClass: ""
  hidden:
    affinity: {}
    annotations: {}
    args: []
    command: []
    configuration: ""
    containerPorts:
      mongodb: 27017
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      medium: ""
      mountPath: /bitnami/mongodb
      size: 8Gi
      storageClass: ""
      subPath: ""
      volumeClaimTemplates:
        dataSource: {}
        requests: {}
        selector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: OrderedReady
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    runtimeClassName: ""
    schedulerName: ""
    service:
      annotations: {}
      extraPorts: []
      portName: mongodb
      ports:
        mongodb: 27017
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 30
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  hostAliases: []
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/mongodb
    tag: 5.0.10-debian-11-r3
  initContainers: []
  initdbScripts: {}
  initdbScriptsConfigMap: ""
  kubeVersion: ""
  labels: {}
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 10
  metrics:
    args: []
    command: []
    containerPort: 9216
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraFlags: ""
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mongodb-exporter
      tag: 0.33.0-debian-11-r9
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 15
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    password: ""
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    service:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
        prometheus.io/scrape: "true"
      extraPorts: []
      ports:
        metrics: 9216
      type: ClusterIP
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: 30s
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
    startupProbe:
      enabled: false
      failureThreshold: 30
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    username: ""
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    medium: ""
    mountPath: /bitnami/mongodb
    resourcePolicy: ""
    size: 8Gi
    storageClass: ""
    subPath: ""
    volumeClaimTemplates:
      dataSource: {}
      requests: {}
      selector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    sysctls: []
  podSecurityPolicy:
    allowPrivilegeEscalation: false
    create: false
    privileged: false
    spec: {}
  priorityClassName: ""
  rbac:
    create: false
    rules: []
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 2
  replicaSetConfigurationSettings:
    configuration: {}
    enabled: false
  replicaSetHostnames: true
  replicaSetName: rs0
  resources:
    limits: {}
    requests: {}
  runtimeClassName: ""
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    externalTrafficPolicy: Local
    extraPorts: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nameOverride: ""
    nodePorts:
      mongodb: ""
    portName: mongodb
    ports:
      mongodb: 27017
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 30
    initialDelaySeconds: 5
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 10
  systemLogVerbosity: 0
  terminationGracePeriodSeconds: ""
  tls:
    autoGenerated: true
    caCert: ""
    caKey: ""
    enabled: false
    existingSecret: ""
    extraDnsNames: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/nginx
      tag: 1.23.1-debian-11-r4
    mode: requireTLS
    resources:
      limits: {}
      requests: {}
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
  useStatefulSet: false
  volumePermissions:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r21
    resources:
      limits: {}
      requests: {}
    securityContext:
      runAsUser: 0
nrf:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    logLevel: info
    sbi:
      advertise: ""
      client:
        no_tls: true
      server:
        no_tls: true
  containerPorts:
    sbi: 7777
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    sbi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        sbi: ""
      ports:
        sbi: 7777
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
nssf:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    logLevel: info
    nrf:
      enabled: true
      sbi:
        hostname: ""
        port: 7777
    nsiList:
    - nrf:
        hostname: ""
        port: 7777
      sd: "0x111111"
      sst: 1
    sbi:
      advertise: ""
      client:
        no_tls: true
      server:
        no_tls: true
    scp:
      enabled: false
      sbi:
        hostname: ""
        port: 7777
  containerPorts:
    sbi: 7777
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    sbi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        sbi: ""
      ports:
        sbi: 7777
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 600
    path: /
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
pcf:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    logLevel: info
    nrf:
      enabled: true
      sbi:
        hostname: ""
        port: 7777
    sbi:
      advertise: ""
      client:
        no_tls: true
      server:
        no_tls: true
    scp:
      enabled: false
      sbi:
        hostname: ""
        port: 7777
  containerPorts:
    metrics: 9090
    sbi: 7777
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  dbURI: ""
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    enabled: true
    serviceMonitor:
      additionalLabels: {}
      enabled: true
      honorLabels: false
      interval: ""
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
    serviceScrape:
      additionalLabels: {}
      enabled: false
      namespace: ""
      scrape_interval: 15s
  mongodb:
    affinity: {}
    annotations: {}
    arbiter:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerPorts:
        mongodb: 27017
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: true
      existingConfigmap: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraFlags: []
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: OrderedReady
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        limits: {}
        requests: {}
      runtimeClassName: ""
      schedulerName: ""
      service:
        annotations: {}
        extraPorts: []
        nameOverride: ""
        ports:
          mongodb: 27017
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        type: RollingUpdate
    architecture: standalone
    args: []
    auth:
      database: ""
      databases: []
      enabled: true
      existingSecret: ""
      password: ""
      passwords: []
      replicaSetKey: ""
      rootPassword: ""
      rootUser: root
      username: ""
      usernames: []
    clusterDomain: cluster.local
    command: []
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        imageRegistry: ""
        namespaceOverride: ""
        storageClass: ""
    commonAnnotations: {}
    commonLabels: {}
    configuration: ""
    containerPorts:
      mongodb: 27017
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    directoryPerDB: false
    disableJavascript: false
    disableSystemLog: false
    enableIPv6: false
    enableJournal: true
    enabled: false
    existingConfigmap: ""
    externalAccess:
      autoDiscovery:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/kubectl
          tag: 1.24.3-debian-11-r7
        resources:
          limits: {}
          requests: {}
      enabled: false
      hidden:
        enabled: false
        service:
          annotations: {}
          domain: ""
          externalTrafficPolicy: Local
          extraPorts: []
          loadBalancerIPs: []
          loadBalancerSourceRanges: []
          nodePorts: []
          portName: mongodb
          ports:
            mongodb: 27017
          sessionAffinity: None
          sessionAffinityConfig: {}
          type: LoadBalancer
      service:
        annotations: {}
        domain: ""
        externalTrafficPolicy: Local
        extraPorts: []
        loadBalancerIPs: []
        loadBalancerSourceRanges: []
        nodePorts: []
        portName: mongodb
        ports:
          mongodb: 27017
        sessionAffinity: None
        sessionAffinityConfig: {}
        type: LoadBalancer
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
      namespaceOverride: ""
      storageClass: ""
    hidden:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerPorts:
        mongodb: 27017
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      existingConfigmap: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraFlags: []
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: true
        medium: ""
        mountPath: /bitnami/mongodb
        size: 8Gi
        storageClass: ""
        subPath: ""
        volumeClaimTemplates:
          dataSource: {}
          requests: {}
          selector: {}
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: OrderedReady
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      replicaCount: 1
      resources:
        limits: {}
        requests: {}
      runtimeClassName: ""
      schedulerName: ""
      service:
        annotations: {}
        extraPorts: []
        portName: mongodb
        ports:
          mongodb: 27017
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        type: RollingUpdate
    hostAliases: []
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mongodb
      tag: 5.0.10-debian-11-r3
    initContainers: []
    initdbScripts: {}
    initdbScriptsConfigMap: ""
    kubeVersion: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    metrics:
      args: []
      command: []
      containerPort: 9216
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      extraFlags: ""
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/mongodb-exporter
        tag: 0.33.0-debian-11-r9
      livenessProbe:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 15
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      password: ""
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits: {}
        requests: {}
      service:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
          prometheus.io/scrape: "true"
        extraPorts: []
        ports:
          metrics: 9216
        type: ClusterIP
      serviceMonitor:
        enabled: false
        honorLabels: false
        interval: 30s
        jobLabel: ""
        labels: {}
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      username: ""
    nameOverride: ""
    namespaceOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      medium: ""
      mountPath: /bitnami/mongodb
      resourcePolicy: ""
      size: 8Gi
      storageClass: ""
      subPath: ""
      volumeClaimTemplates:
        dataSource: {}
        requests: {}
        selector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: OrderedReady
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      sysctls: []
    podSecurityPolicy:
      allowPrivilegeEscalation: false
      create: false
      privileged: false
      spec: {}
    priorityClassName: ""
    rbac:
      create: false
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 2
    replicaSetConfigurationSettings:
      configuration: {}
      enabled: false
    replicaSetHostnames: true
    replicaSetName: rs0
    resources:
      limits: {}
      requests: {}
    runtimeClassName: ""
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: Local
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nameOverride: ""
      nodePorts:
        mongodb: ""
      portName: mongodb
      ports:
        mongodb: 27017
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      name: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 30
      initialDelaySeconds: 5
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    systemLogVerbosity: 0
    terminationGracePeriodSeconds: ""
    tls:
      autoGenerated: true
      caCert: ""
      caKey: ""
      enabled: false
      existingSecret: ""
      extraDnsNames: []
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/nginx
        tag: 1.23.1-debian-11-r4
      mode: requireTLS
      resources:
        limits: {}
        requests: {}
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
    useStatefulSet: false
    volumePermissions:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 11-debian-11-r21
      resources:
        limits: {}
        requests: {}
      securityContext:
        runAsUser: 0
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    metrics:
      annotations:
        prometheus.io/path: /metrics
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        metrics: ""
      ports:
        metrics: 9090
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sbi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        sbi: ""
      ports:
        sbi: 7777
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
pcrf:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    logLevel: info
    smf:
      frdi:
        hostname: ""
        port: 3868
  containerPorts:
    frdi: 3868
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  dbURI: ""
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  mongodb:
    affinity: {}
    annotations: {}
    arbiter:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerPorts:
        mongodb: 27017
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: true
      existingConfigmap: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraFlags: []
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: OrderedReady
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        limits: {}
        requests: {}
      runtimeClassName: ""
      schedulerName: ""
      service:
        annotations: {}
        extraPorts: []
        nameOverride: ""
        ports:
          mongodb: 27017
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        type: RollingUpdate
    architecture: standalone
    args: []
    auth:
      database: ""
      databases: []
      enabled: false
      existingSecret: ""
      password: ""
      passwords: []
      replicaSetKey: ""
      rootPassword: ""
      rootUser: root
      username: ""
      usernames: []
    clusterDomain: cluster.local
    command: []
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        imageRegistry: ""
        namespaceOverride: ""
        storageClass: ""
    commonAnnotations: {}
    commonLabels: {}
    configuration: ""
    containerPorts:
      mongodb: 27017
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    directoryPerDB: false
    disableJavascript: false
    disableSystemLog: false
    enableIPv6: false
    enableJournal: true
    enabled: false
    existingConfigmap: ""
    externalAccess:
      autoDiscovery:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/kubectl
          tag: 1.24.3-debian-11-r7
        resources:
          limits: {}
          requests: {}
      enabled: false
      hidden:
        enabled: false
        service:
          annotations: {}
          domain: ""
          externalTrafficPolicy: Local
          extraPorts: []
          loadBalancerIPs: []
          loadBalancerSourceRanges: []
          nodePorts: []
          portName: mongodb
          ports:
            mongodb: 27017
          sessionAffinity: None
          sessionAffinityConfig: {}
          type: LoadBalancer
      service:
        annotations: {}
        domain: ""
        externalTrafficPolicy: Local
        extraPorts: []
        loadBalancerIPs: []
        loadBalancerSourceRanges: []
        nodePorts: []
        portName: mongodb
        ports:
          mongodb: 27017
        sessionAffinity: None
        sessionAffinityConfig: {}
        type: LoadBalancer
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
      namespaceOverride: ""
      storageClass: ""
    hidden:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerPorts:
        mongodb: 27017
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      existingConfigmap: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraFlags: []
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: true
        medium: ""
        mountPath: /bitnami/mongodb
        size: 8Gi
        storageClass: ""
        subPath: ""
        volumeClaimTemplates:
          dataSource: {}
          requests: {}
          selector: {}
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: OrderedReady
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      replicaCount: 1
      resources:
        limits: {}
        requests: {}
      runtimeClassName: ""
      schedulerName: ""
      service:
        annotations: {}
        extraPorts: []
        portName: mongodb
        ports:
          mongodb: 27017
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        type: RollingUpdate
    hostAliases: []
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mongodb
      tag: 5.0.10-debian-11-r3
    initContainers: []
    initdbScripts: {}
    initdbScriptsConfigMap: ""
    kubeVersion: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    metrics:
      args: []
      command: []
      containerPort: 9216
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      extraFlags: ""
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/mongodb-exporter
        tag: 0.33.0-debian-11-r9
      livenessProbe:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 15
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      password: ""
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits: {}
        requests: {}
      service:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
          prometheus.io/scrape: "true"
        extraPorts: []
        ports:
          metrics: 9216
        type: ClusterIP
      serviceMonitor:
        enabled: false
        honorLabels: false
        interval: 30s
        jobLabel: ""
        labels: {}
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      username: ""
    nameOverride: ""
    namespaceOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      medium: ""
      mountPath: /bitnami/mongodb
      resourcePolicy: ""
      size: 8Gi
      storageClass: ""
      subPath: ""
      volumeClaimTemplates:
        dataSource: {}
        requests: {}
        selector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: OrderedReady
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      sysctls: []
    podSecurityPolicy:
      allowPrivilegeEscalation: false
      create: false
      privileged: false
      spec: {}
    priorityClassName: ""
    rbac:
      create: false
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 2
    replicaSetConfigurationSettings:
      configuration: {}
      enabled: false
    replicaSetHostnames: true
    replicaSetName: rs0
    resources:
      limits: {}
      requests: {}
    runtimeClassName: ""
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: Local
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nameOverride: ""
      nodePorts:
        mongodb: ""
      portName: mongodb
      ports:
        mongodb: 27017
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      name: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 30
      initialDelaySeconds: 5
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    systemLogVerbosity: 0
    terminationGracePeriodSeconds: ""
    tls:
      autoGenerated: true
      caCert: ""
      caKey: ""
      enabled: false
      existingSecret: ""
      extraDnsNames: []
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/nginx
        tag: 1.23.1-debian-11-r4
      mode: requireTLS
      resources:
        limits: {}
        requests: {}
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
    useStatefulSet: false
    volumePermissions:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 11-debian-11-r21
      resources:
        limits: {}
        requests: {}
      securityContext:
        runAsUser: 0
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    frdi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        frdi: ""
      ports:
        frdi: 3868
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
populate:
  enabled: true
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: openverso/open5gs-dbctl
    tag: 0.10.2
  initCommands: []
scp:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    logLevel: info
    nrf:
      enabled: true
      sbi:
        hostname: ""
        port: 7777
    sbi:
      advertise: ""
      client:
        no_tls: true
      server:
        no_tls: true
  containerPorts:
    sbi: 7777
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  dbURI: ""
  enabled: false
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  mongodb:
    affinity: {}
    annotations: {}
    arbiter:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerPorts:
        mongodb: 27017
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: true
      existingConfigmap: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraFlags: []
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: OrderedReady
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        limits: {}
        requests: {}
      runtimeClassName: ""
      schedulerName: ""
      service:
        annotations: {}
        extraPorts: []
        nameOverride: ""
        ports:
          mongodb: 27017
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        type: RollingUpdate
    architecture: standalone
    args: []
    auth:
      database: ""
      databases: []
      enabled: false
      existingSecret: ""
      password: ""
      passwords: []
      replicaSetKey: ""
      rootPassword: ""
      rootUser: root
      username: ""
      usernames: []
    clusterDomain: cluster.local
    command: []
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        imageRegistry: ""
        namespaceOverride: ""
        storageClass: ""
    commonAnnotations: {}
    commonLabels: {}
    configuration: ""
    containerPorts:
      mongodb: 27017
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    directoryPerDB: false
    disableJavascript: false
    disableSystemLog: false
    enableIPv6: false
    enableJournal: true
    enabled: false
    existingConfigmap: ""
    externalAccess:
      autoDiscovery:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/kubectl
          tag: 1.24.3-debian-11-r7
        resources:
          limits: {}
          requests: {}
      enabled: false
      hidden:
        enabled: false
        service:
          annotations: {}
          domain: ""
          externalTrafficPolicy: Local
          extraPorts: []
          loadBalancerIPs: []
          loadBalancerSourceRanges: []
          nodePorts: []
          portName: mongodb
          ports:
            mongodb: 27017
          sessionAffinity: None
          sessionAffinityConfig: {}
          type: LoadBalancer
      service:
        annotations: {}
        domain: ""
        externalTrafficPolicy: Local
        extraPorts: []
        loadBalancerIPs: []
        loadBalancerSourceRanges: []
        nodePorts: []
        portName: mongodb
        ports:
          mongodb: 27017
        sessionAffinity: None
        sessionAffinityConfig: {}
        type: LoadBalancer
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
      namespaceOverride: ""
      storageClass: ""
    hidden:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerPorts:
        mongodb: 27017
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      existingConfigmap: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraFlags: []
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: true
        medium: ""
        mountPath: /bitnami/mongodb
        size: 8Gi
        storageClass: ""
        subPath: ""
        volumeClaimTemplates:
          dataSource: {}
          requests: {}
          selector: {}
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: OrderedReady
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      replicaCount: 1
      resources:
        limits: {}
        requests: {}
      runtimeClassName: ""
      schedulerName: ""
      service:
        annotations: {}
        extraPorts: []
        portName: mongodb
        ports:
          mongodb: 27017
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        type: RollingUpdate
    hostAliases: []
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mongodb
      tag: 5.0.10-debian-11-r3
    initContainers: []
    initdbScripts: {}
    initdbScriptsConfigMap: ""
    kubeVersion: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    metrics:
      args: []
      command: []
      containerPort: 9216
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      extraFlags: ""
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/mongodb-exporter
        tag: 0.33.0-debian-11-r9
      livenessProbe:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 15
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      password: ""
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits: {}
        requests: {}
      service:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
          prometheus.io/scrape: "true"
        extraPorts: []
        ports:
          metrics: 9216
        type: ClusterIP
      serviceMonitor:
        enabled: false
        honorLabels: false
        interval: 30s
        jobLabel: ""
        labels: {}
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      username: ""
    nameOverride: ""
    namespaceOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      medium: ""
      mountPath: /bitnami/mongodb
      resourcePolicy: ""
      size: 8Gi
      storageClass: ""
      subPath: ""
      volumeClaimTemplates:
        dataSource: {}
        requests: {}
        selector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: OrderedReady
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      sysctls: []
    podSecurityPolicy:
      allowPrivilegeEscalation: false
      create: false
      privileged: false
      spec: {}
    priorityClassName: ""
    rbac:
      create: false
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 2
    replicaSetConfigurationSettings:
      configuration: {}
      enabled: false
    replicaSetHostnames: true
    replicaSetName: rs0
    resources:
      limits: {}
      requests: {}
    runtimeClassName: ""
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: Local
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nameOverride: ""
      nodePorts:
        mongodb: ""
      portName: mongodb
      ports:
        mongodb: 27017
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      name: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 30
      initialDelaySeconds: 5
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    systemLogVerbosity: 0
    terminationGracePeriodSeconds: ""
    tls:
      autoGenerated: true
      caCert: ""
      caKey: ""
      enabled: false
      existingSecret: ""
      extraDnsNames: []
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/nginx
        tag: 1.23.1-debian-11-r4
      mode: requireTLS
      resources:
        limits: {}
        requests: {}
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
    useStatefulSet: false
    volumePermissions:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 11-debian-11-r21
      resources:
        limits: {}
        requests: {}
      securityContext:
        runAsUser: 0
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    sbi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        sbi: ""
      ports:
        sbi: 7777
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
sgwc:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    dnsList:
    - 8.8.8.8
    - 8.8.4.4
    - 2001:4860:4860::8888
    - 2001:4860:4860::8844
    logLevel: info
    mtu: 1400
    sgwu:
      pfcpList:
      - apn:
        - internet
        hostname: ""
        port: 8805
    subnetList:
    - addr: 10.45.0.1/16
      dnn: internet
  containerPorts:
    gtpc: 2123
    pfcp: 8805
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    gtpc:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        gtpc: ""
      ports:
        gtpc: 2123
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    pfcp:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        pfcp: ""
      ports:
        pfcp: 8805
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
sgwu:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    logLevel: info
    sgwc:
      pfcp:
        hostname: ""
        port: 8805
    sgwu:
      gtpu:
        advertise: ""
        dev: ""
  containerPorts:
    gtpu: 2152
    pfcp: 8805
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    gtpu:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        gtpu: ""
      ports:
        gtpu: 2152
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    pfcp:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        pfcp: ""
      ports:
        pfcp: 8805
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
smf:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    dnsList:
    - 8.8.8.8
    - 8.8.4.4
    - 2001:4860:4860::8888
    - 2001:4860:4860::8844
    logLevel: info
    mtu: 1400
    nrf:
      enabled: true
      sbi:
        hostname: ""
        port: 7777
    pcrf:
      enabled: true
      frdi:
        hostname: ""
        port: 3868
    sbi:
      advertise: ""
      client:
        no_tls: true
      server:
        no_tls: true
    scp:
      enabled: false
      sbi:
        hostname: ""
        port: 7777
    subnetList:
    - addr: 10.45.0.1/16
      dnn: internet
    upf:
      pfcp:
        hostname: ""
        port: 8805
  containerPorts:
    frdi: 3868
    gtpc: 2123
    gtpu: 2152
    metrics: 9090
    pfcp: 8805
    sbi: 7777
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    enabled: true
    serviceMonitor:
      additionalLabels: {}
      enabled: true
      honorLabels: false
      interval: ""
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
    serviceScrape:
      additionalLabels: {}
      enabled: false
      namespace: ""
      scrape_interval: 15s
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    frdi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        frdi: ""
      ports:
        frdi: 3868
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    gtpc:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        gtpc: ""
      ports:
        gtpc: 2123
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    gtpu:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        gtpu: ""
      ports:
        gtpu: 2152
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    metrics:
      annotations:
        prometheus.io/path: /metrics
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        metrics: ""
      ports:
        metrics: 9090
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    pfcp:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        pfcp: ""
      ports:
        pfcp: 8805
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sbi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        sbi: ""
      ports:
        sbi: 7777
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 600
    path: /
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
udm:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    logLevel: info
    nrf:
      enabled: true
      sbi:
        hostname: ""
        port: 7777
    sbi:
      advertise: ""
      client:
        no_tls: true
      server:
        no_tls: true
    scp:
      enabled: false
      sbi:
        hostname: ""
        port: 7777
  containerPorts:
    sbi: 7777
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    sbi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        sbi: ""
      ports:
        sbi: 7777
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
udr:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    logLevel: info
    nrf:
      enabled: true
      sbi:
        hostname: ""
        port: 7777
    sbi:
      advertise: ""
      client:
        no_tls: true
      server:
        no_tls: true
    scp:
      enabled: false
      sbi:
        hostname: ""
        port: 7777
  containerPorts:
    sbi: 7777
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  dbURI: ""
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  mongodb:
    affinity: {}
    annotations: {}
    arbiter:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerPorts:
        mongodb: 27017
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: true
      existingConfigmap: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraFlags: []
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: OrderedReady
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        limits: {}
        requests: {}
      runtimeClassName: ""
      schedulerName: ""
      service:
        annotations: {}
        extraPorts: []
        nameOverride: ""
        ports:
          mongodb: 27017
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        type: RollingUpdate
    architecture: standalone
    args: []
    auth:
      database: ""
      databases: []
      enabled: false
      existingSecret: ""
      password: ""
      passwords: []
      replicaSetKey: ""
      rootPassword: ""
      rootUser: root
      username: ""
      usernames: []
    clusterDomain: cluster.local
    command: []
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        imageRegistry: ""
        namespaceOverride: ""
        storageClass: ""
    commonAnnotations: {}
    commonLabels: {}
    configuration: ""
    containerPorts:
      mongodb: 27017
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    directoryPerDB: false
    disableJavascript: false
    disableSystemLog: false
    enableIPv6: false
    enableJournal: true
    enabled: false
    existingConfigmap: ""
    externalAccess:
      autoDiscovery:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/kubectl
          tag: 1.24.3-debian-11-r7
        resources:
          limits: {}
          requests: {}
      enabled: false
      hidden:
        enabled: false
        service:
          annotations: {}
          domain: ""
          externalTrafficPolicy: Local
          extraPorts: []
          loadBalancerIPs: []
          loadBalancerSourceRanges: []
          nodePorts: []
          portName: mongodb
          ports:
            mongodb: 27017
          sessionAffinity: None
          sessionAffinityConfig: {}
          type: LoadBalancer
      service:
        annotations: {}
        domain: ""
        externalTrafficPolicy: Local
        extraPorts: []
        loadBalancerIPs: []
        loadBalancerSourceRanges: []
        nodePorts: []
        portName: mongodb
        ports:
          mongodb: 27017
        sessionAffinity: None
        sessionAffinityConfig: {}
        type: LoadBalancer
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
      namespaceOverride: ""
      storageClass: ""
    hidden:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerPorts:
        mongodb: 27017
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      existingConfigmap: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraFlags: []
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: true
        medium: ""
        mountPath: /bitnami/mongodb
        size: 8Gi
        storageClass: ""
        subPath: ""
        volumeClaimTemplates:
          dataSource: {}
          requests: {}
          selector: {}
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: OrderedReady
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      replicaCount: 1
      resources:
        limits: {}
        requests: {}
      runtimeClassName: ""
      schedulerName: ""
      service:
        annotations: {}
        extraPorts: []
        portName: mongodb
        ports:
          mongodb: 27017
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        type: RollingUpdate
    hostAliases: []
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mongodb
      tag: 5.0.10-debian-11-r3
    initContainers: []
    initdbScripts: {}
    initdbScriptsConfigMap: ""
    kubeVersion: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    metrics:
      args: []
      command: []
      containerPort: 9216
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      extraFlags: ""
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/mongodb-exporter
        tag: 0.33.0-debian-11-r9
      livenessProbe:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 15
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      password: ""
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits: {}
        requests: {}
      service:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
          prometheus.io/scrape: "true"
        extraPorts: []
        ports:
          metrics: 9216
        type: ClusterIP
      serviceMonitor:
        enabled: false
        honorLabels: false
        interval: 30s
        jobLabel: ""
        labels: {}
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      username: ""
    nameOverride: ""
    namespaceOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      medium: ""
      mountPath: /bitnami/mongodb
      resourcePolicy: ""
      size: 8Gi
      storageClass: ""
      subPath: ""
      volumeClaimTemplates:
        dataSource: {}
        requests: {}
        selector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: OrderedReady
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      sysctls: []
    podSecurityPolicy:
      allowPrivilegeEscalation: false
      create: false
      privileged: false
      spec: {}
    priorityClassName: ""
    rbac:
      create: false
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 2
    replicaSetConfigurationSettings:
      configuration: {}
      enabled: false
    replicaSetHostnames: true
    replicaSetName: rs0
    resources:
      limits: {}
      requests: {}
    runtimeClassName: ""
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: Local
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nameOverride: ""
      nodePorts:
        mongodb: ""
      portName: mongodb
      ports:
        mongodb: 27017
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      name: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 30
      initialDelaySeconds: 5
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    systemLogVerbosity: 0
    terminationGracePeriodSeconds: ""
    tls:
      autoGenerated: true
      caCert: ""
      caKey: ""
      enabled: false
      existingSecret: ""
      extraDnsNames: []
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/nginx
        tag: 1.23.1-debian-11-r4
      mode: requireTLS
      resources:
        limits: {}
        requests: {}
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
    useStatefulSet: false
    volumePermissions:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 11-debian-11-r21
      resources:
        limits: {}
        requests: {}
      securityContext:
        runAsUser: 0
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    sbi:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        sbi: ""
      ports:
        sbi: 7777
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
upf:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  config:
    logLevel: info
    smf:
      pfcp:
        hostname: ""
    subnetList:
    - addr: 10.45.0.1/16
      createDev: true
      dev: ogstun
      dnn: internet
      enableNAT: true
    upf:
      gtpu:
        advertise: ""
        dev: ""
  containerPorts:
    gtpu: 2152
    metrics: 9090
    pfcp: 8805
  containerSecurityContext:
    capabilities:
      add:
      - NET_ADMIN
    enabled: true
    privileged: true
    runAsNonRoot: false
  customLivenessProbe: {}
  customOpen5gsConfig: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs
    tag: 2.6.4
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  metrics:
    enabled: true
    serviceMonitor:
      additionalLabels: {}
      enabled: true
      honorLabels: false
      interval: ""
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
    serviceScrape:
      additionalLabels: {}
      enabled: false
      namespace: ""
      scrape_interval: 15s
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  open5gs-smf:
    enabled: false
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    gtpu:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        gtpu: ""
      ports:
        gtpu: 2152
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    metrics:
      annotations:
        prometheus.io/path: /metrics
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        metrics: ""
      ports:
        metrics: 9090
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    pfcp:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        pfcp: ""
      ports:
        pfcp: 8805
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
webui:
  affinity: {}
  args: []
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  containerPorts:
    http: 3000
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  dbURI: ""
  enabled: true
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: openverso/open5gs-webui
    tag: 2.6.4
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: true
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: ""
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    tls: false
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  mongodb:
    affinity: {}
    annotations: {}
    arbiter:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerPorts:
        mongodb: 27017
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: true
      existingConfigmap: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraFlags: []
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: OrderedReady
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        limits: {}
        requests: {}
      runtimeClassName: ""
      schedulerName: ""
      service:
        annotations: {}
        extraPorts: []
        nameOverride: ""
        ports:
          mongodb: 27017
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        type: RollingUpdate
    architecture: standalone
    args: []
    auth:
      database: ""
      databases: []
      enabled: false
      existingSecret: ""
      password: ""
      passwords: []
      replicaSetKey: ""
      rootPassword: ""
      rootUser: root
      username: ""
      usernames: []
    clusterDomain: cluster.local
    command: []
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: []
        imageRegistry: ""
        namespaceOverride: ""
        storageClass: ""
    commonAnnotations: {}
    commonLabels: {}
    configuration: ""
    containerPorts:
      mongodb: 27017
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    directoryPerDB: false
    disableJavascript: false
    disableSystemLog: false
    enableIPv6: false
    enableJournal: true
    enabled: false
    existingConfigmap: ""
    externalAccess:
      autoDiscovery:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/kubectl
          tag: 1.24.3-debian-11-r7
        resources:
          limits: {}
          requests: {}
      enabled: false
      hidden:
        enabled: false
        service:
          annotations: {}
          domain: ""
          externalTrafficPolicy: Local
          extraPorts: []
          loadBalancerIPs: []
          loadBalancerSourceRanges: []
          nodePorts: []
          portName: mongodb
          ports:
            mongodb: 27017
          sessionAffinity: None
          sessionAffinityConfig: {}
          type: LoadBalancer
      service:
        annotations: {}
        domain: ""
        externalTrafficPolicy: Local
        extraPorts: []
        loadBalancerIPs: []
        loadBalancerSourceRanges: []
        nodePorts: []
        portName: mongodb
        ports:
          mongodb: 27017
        sessionAffinity: None
        sessionAffinityConfig: {}
        type: LoadBalancer
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
      namespaceOverride: ""
      storageClass: ""
    hidden:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerPorts:
        mongodb: 27017
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      existingConfigmap: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraFlags: []
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      pdb:
        create: false
        maxUnavailable: ""
        minAvailable: 1
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: true
        medium: ""
        mountPath: /bitnami/mongodb
        size: 8Gi
        storageClass: ""
        subPath: ""
        volumeClaimTemplates:
          dataSource: {}
          requests: {}
          selector: {}
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podManagementPolicy: OrderedReady
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        sysctls: []
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      replicaCount: 1
      resources:
        limits: {}
        requests: {}
      runtimeClassName: ""
      schedulerName: ""
      service:
        annotations: {}
        extraPorts: []
        portName: mongodb
        ports:
          mongodb: 27017
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        type: RollingUpdate
    hostAliases: []
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mongodb
      tag: 5.0.10-debian-11-r3
    initContainers: []
    initdbScripts: {}
    initdbScriptsConfigMap: ""
    kubeVersion: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    metrics:
      args: []
      command: []
      containerPort: 9216
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      extraFlags: ""
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/mongodb-exporter
        tag: 0.33.0-debian-11-r9
      livenessProbe:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 15
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      password: ""
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits: {}
        requests: {}
      service:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
          prometheus.io/scrape: "true"
        extraPorts: []
        ports:
          metrics: 9216
        type: ClusterIP
      serviceMonitor:
        enabled: false
        honorLabels: false
        interval: 30s
        jobLabel: ""
        labels: {}
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      username: ""
    nameOverride: ""
    namespaceOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      medium: ""
      mountPath: /bitnami/mongodb
      resourcePolicy: ""
      size: 8Gi
      storageClass: ""
      subPath: ""
      volumeClaimTemplates:
        dataSource: {}
        requests: {}
        selector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: OrderedReady
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      sysctls: []
    podSecurityPolicy:
      allowPrivilegeEscalation: false
      create: false
      privileged: false
      spec: {}
    priorityClassName: ""
    rbac:
      create: false
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 2
    replicaSetConfigurationSettings:
      configuration: {}
      enabled: false
    replicaSetHostnames: true
    replicaSetName: rs0
    resources:
      limits: {}
      requests: {}
    runtimeClassName: ""
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: Local
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nameOverride: ""
      nodePorts:
        mongodb: ""
      portName: mongodb
      ports:
        mongodb: 27017
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      name: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 30
      initialDelaySeconds: 5
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 10
    systemLogVerbosity: 0
    terminationGracePeriodSeconds: ""
    tls:
      autoGenerated: true
      caCert: ""
      caKey: ""
      enabled: false
      existingSecret: ""
      extraDnsNames: []
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/nginx
        tag: 1.23.1-debian-11-r4
      mode: requireTLS
      resources:
        limits: {}
        requests: {}
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
    useStatefulSet: false
    volumePermissions:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 11-debian-11-r21
      resources:
        limits: {}
        requests: {}
      securityContext:
        runAsUser: 0
  nameOverride: ""
  namespaceOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  services:
    http:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        http: ""
      ports:
        http: 3000
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  sessionAffinity: None
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 600
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate

HOOKS:
MANIFEST:
---
# Source: open5gs/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: open5gs-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: open5gs-mongodb
automountServiceAccountToken: true
---
# Source: open5gs/charts/amf/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-amf
  labels:
    app.kubernetes.io/name: amf
    helm.sh/chart: amf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  amf.yaml: |
    
    logger:
      level: info
    parameter: {}
    
    sbi:
      server:
        no_tls: true
      client:
        no_tls: true
    
    amf:
      sbi:
        - dev: "eth0"
          port: 7777
      ngap:
        - dev: "eth0"
          port: 38412
      metrics:
        addr: 0.0.0.0
        port: 9090
      guami:
        -
          amf_id:
            region: 2
            set: 1
          plmn_id:
            mcc: "999"
            mnc: "70"
      tai:
        -
          plmn_id:
            mcc: "999"
            mnc: "70"
          tac:
          - 1
          - 2
          - 3
      plmn_support:
        -
          plmn_id:
            mcc: "999"
            mnc: "70"
          s_nssai:
          - sd: "0x111111"
            sst: 1
      network_name:
        full: Gradiant
      amf_name: open5gs-amf
    
      security:
        integrity_order : [ NIA2, NIA1, NIA0 ]
        ciphering_order : [ NEA0, NEA1, NEA2 ]
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 7777
---
# Source: open5gs/charts/ausf/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-ausf
  labels:
    app.kubernetes.io/name: ausf
    helm.sh/chart: ausf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  ausf.yaml: |
    
    
    logger:
      level: info
    parameter: {}
    
    sbi:
      server:
        no_tls: true
      client:
        no_tls: true
    
    ausf:
      sbi:
        - dev: "eth0"
          port: 7777
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 7777
---
# Source: open5gs/charts/bsf/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-bsf
  labels:
    app.kubernetes.io/name: bsf
    helm.sh/chart: bsf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  bsf.yaml: |
    
    
    logger:
      level: info
    parameter: {}
    
    sbi:
      server:
        no_tls: true
      client:
        no_tls: true
    
    bsf:
      sbi:
        - dev: "eth0"
          port: 7777
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 7777
---
# Source: open5gs/charts/hss/templates/configmap-diameter.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-hss-diameter
  labels:
    app.kubernetes.io/name: hss
    helm.sh/chart: hss-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  hss.conf: |
    
    # This is a sample configuration file for freeDiameter daemon.
    
    # Most of the options can be omitted, as they default to reasonable values.
    # Only TLS-related options must be configured properly in usual setups.
    
    # It is possible to use "include" keyword to import additional files
    # e.g.: include "/etc/freeDiameter.d/*.conf"
    # This is exactly equivalent as copy & paste the content of the included file(s)
    # where the "include" keyword is found.
    
    
    ##############################################################
    ##  Peer identity and realm
    
    # The Diameter Identity of this daemon.
    # This must be a valid FQDN that resolves to the local host.
    # Default: hostname's FQDN
    #Identity = "aaa.koganei.freediameter.net";
    Identity = "hss.localdomain";
    
    # The Diameter Realm of this daemon.
    # Default: the domain part of Identity (after the first dot).
    #Realm = "koganei.freediameter.net";
    Realm = "localdomain";
    
    ##############################################################
    ##  Transport protocol configuration
    
    # The port this peer is listening on for incoming connections (TCP and SCTP).
    # Default: 3868. Use 0 to disable.
    Port = 3868;
    
    # The port this peer is listening on for incoming TLS-protected connections (TCP and SCTP).
    # See TLS_old_method for more information about TLS flavours.
    # Note: we use TLS/SCTP instead of DTLS/SCTP at the moment. This will change in future version of freeDiameter.
    # Default: 5868. Use 0 to disable.
    #SecPort = 5868;
    
    # Use RFC3588 method for TLS protection, where TLS is negociated after CER/CEA exchange is completed
    # on the unsecure connection. The alternative is RFC6733 mechanism, where TLS protects also the
    # CER/CEA exchange on a dedicated secure port.
    # This parameter only affects outgoing connections.
    # The setting can be also defined per-peer (see Peers configuration section).
    # Default: use RFC6733 method with separate port for TLS.
    #TLS_old_method;
    
    # Disable use of TCP protocol (only listen and connect over SCTP)
    # Default : TCP enabled
    #No_TCP;
    
    # Disable use of SCTP protocol (only listen and connect over TCP)
    # Default : SCTP enabled
    #No_SCTP;
    # This option is ignored if freeDiameter is compiled with DISABLE_SCTP option.
    
    # Prefer TCP instead of SCTP for establishing new connections.
    # This setting may be overwritten per peer in peer configuration blocs.
    # Default : SCTP is attempted first.
    #Prefer_TCP;
    
    # Default number of streams per SCTP associations.
    # This setting may be overwritten per peer basis.
    # Default : 30 streams
    #SCTP_streams = 30;
    
    ##############################################################
    ##  Endpoint configuration
    
    # Disable use of IP addresses (only IPv6)
    # Default : IP enabled
    #No_IP;
    
    # Disable use of IPv6 addresses (only IP)
    # Default : IPv6 enabled
    #No_IPv6;
    
    # Specify local addresses the server must bind to
    # Default : listen on all addresses available.
    #ListenOn = "202.249.37.5";
    #ListenOn = "2001:200:903:2::202:1";
    #ListenOn = "fe80::21c:5ff:fe98:7d62%eth0";
    #ListenOn = "127.0.0.4";
    
    
    ##############################################################
    ##  Server configuration
    
    # How many Diameter peers are allowed to be connecting at the same time ?
    # This parameter limits the number of incoming connections from the time
    # the connection is accepted until the first CER is received.
    # Default: 5 unidentified clients in paralel.
    #ThreadsPerServer = 5;
    
    ##############################################################
    ##  TLS Configuration
    
    # TLS is managed by the GNUTLS library in the freeDiameter daemon.
    # You may find more information about parameters and special behaviors
    # in the relevant documentation.
    # http://www.gnu.org/software/gnutls/manual/
    
    # Credentials of the local peer
    # The X509 certificate and private key file to use for the local peer.
    # The files must contain PKCS-1 encoded RSA key, in PEM format.
    # (These parameters are passed to gnutls_certificate_set_x509_key_file function)
    # Default : NO DEFAULT
    #TLS_Cred = "<x509 certif file.PEM>" , "<x509 private key file.PEM>";
    #TLS_Cred = "/etc/ssl/certs/freeDiameter.pem", "/etc/ssl/private/freeDiameter.key";
    TLS_Cred = "/opt/open5gs/etc/open5gs/tls/hss.crt", "/opt/open5gs/etc/open5gs/tls/hss.key";
    
    # Certificate authority / trust anchors
    # The file containing the list of trusted Certificate Authorities (PEM list)
    # (This parameter is passed to gnutls_certificate_set_x509_trust_file function)
    # The directive can appear several times to specify several files.
    # Default : GNUTLS default behavior
    #TLS_CA = "<file.PEM>";
    TLS_CA = "/opt/open5gs/etc/open5gs/tls/ca.crt";
    
    # Certificate Revocation List file
    # The information about revoked certificates.
    # The file contains a list of trusted CRLs in PEM format. They should have been verified before.
    # (This parameter is passed to gnutls_certificate_set_x509_crl_file function)
    # Note: openssl CRL format might have interoperability issue with GNUTLS format.
    # Default : GNUTLS default behavior
    #TLS_CRL = "<file.PEM>";
    
    # GNU TLS Priority string
    # This string allows to configure the behavior of GNUTLS key exchanges
    # algorithms. See gnutls_priority_init function documentation for information.
    # You should also refer to the Diameter required TLS support here:
    #   http://tools.ietf.org/html/rfc6733#section-13.1
    # Default : "NORMAL"
    # Example: TLS_Prio = "NONE:+VERS-TLS1.1:+AES-128-CBC:+RSA:+SHA1:+COMP-NULL";
    #TLS_Prio = "NORMAL";
    
    # Diffie-Hellman parameters size
    # Set the number of bits for generated DH parameters
    # Valid value should be 768, 1024, 2048, 3072 or 4096.
    # (This parameter is passed to gnutls_dh_params_generate2 function,
    # it usually should match RSA key size)
    # Default : 1024
    #TLS_DH_Bits = 1024;
    
    # Alternatively, you can specify a file to load the PKCS#3 encoded
    # DH parameters directly from. This accelerates the daemon start
    # but is slightly less secure. If this file is provided, the
    # TLS_DH_Bits parameters has no effect.
    # Default : no default.
    #TLS_DH_File = "<file.PEM>";
    
    
    ##############################################################
    ##  Timers configuration
    
    # The Tc timer of this peer.
    # It is the delay before a new attempt is made to reconnect a disconnected peer.
    # The value is expressed in seconds. The recommended value is 30 seconds.
    # Default: 30
    #TcTimer = 30;
    
    # The Tw timer of this peer.
    # It is the delay before a watchdog message is sent, as described in RFC 3539.
    # The value is expressed in seconds. The default value is 30 seconds. Value must
    # be greater or equal to 6 seconds. See details in the RFC.
    # Default: 30
    #TwTimer = 30;
    
    ##############################################################
    ##  Applications configuration
    
    # Disable the relaying of Diameter messages?
    # For messages not handled locally, the default behavior is to forward the
    # message to another peer if any is available, according to the routing
    # algorithms. In addition the "0xffffff" application is advertised in CER/CEA
    # exchanges.
    # Default: Relaying is enabled.
    #NoRelay;
    
    # Number of server threads that can handle incoming messages at the same time.
    # Default: 4
    #AppServThreads = 4;
    
    # Other applications are configured by loaded extensions.
    
    ##############################################################
    ##  Extensions configuration
    
    #  The freeDiameter framework merely provides support for
    # Diameter Base Protocol. The specific application behaviors,
    # as well as advanced functions, are provided
    # by loadable extensions (plug-ins).
    #  These extensions may in addition receive the name of a
    # configuration file, the format of which is extension-specific.
    #
    # Format:
    #LoadExtension = "/path/to/extension" [ : "/optional/configuration/file" ] ;
    #
    # Examples:
    #LoadExtension = "extensions/sample.fdx";
    #LoadExtension = "extensions/sample.fdx":"conf/sample.conf";
    
    # Extensions are named as follow:
    # dict_* for extensions that add content to the dictionary definitions.
    # dbg_*  for extensions useful only to retrieve more information on the framework execution.
    # acl_*  : Access control list, to control which peers are allowed to connect.
    # rt_*   : routing extensions that impact how messages are forwarded to other peers.
    # app_*  : applications, these extensions usually register callbacks to handle specific messages.
    # test_* : dummy extensions that are useful only in testing environments.
    
    
    # The dbg_msg_dump.fdx extension allows you to tweak the way freeDiameter displays some
    # information about some events. This extension does not actually use a configuration file
    # but receives directly a parameter in the string passed to the extension. Here are some examples:
    ## LoadExtension = "dbg_msg_dumps.fdx" : "0x1111"; # Removes all default hooks, very quiet even in case of errors.
    ## LoadExtension = "dbg_msg_dumps.fdx" : "0x2222"; # Display all events with few details.
    ## LoadExtension = "dbg_msg_dumps.fdx" : "0x0080"; # Dump complete information about sent and received messages.
    # The four digits respectively control: connections, routing decisions, sent/received messages, errors.
    # The values for each digit are:
    #  0 - default - keep the default behavior
    #  1 - quiet   - remove any specific log
    #  2 - compact - display only a summary of the information
    #  4 - full    - display the complete information on a single long line
    #  8 - tree    - display the complete information in an easier to read format spanning several lines.
    
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dbg_msg_dumps.fdx" : "0x8888";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_rfc5777.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_mip6i.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_nasreq.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_nas_mipv6.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_dcca.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_dcca_3gpp.fdx";
    
    
    ##############################################################
    ##  Peers configuration
    
    #  The local server listens for incoming connections. By default,
    # all unknown connecting peers are rejected. Extensions can override this behavior (e.g., acl_wl).
    # 
    #  In addition to incoming connections, the local peer can
    # be configured to establish and maintain connections to some
    # Diameter nodes and allow connections from these nodes.
    #  This is achieved with the ConnectPeer directive described below.
    #
    # Note that the configured Diameter Identity MUST match
    # the information received inside CEA, or the connection will be aborted.
    #
    # Format:
    #ConnectPeer = "diameterid" [ { parameter1; parameter2; ...} ] ;
    # Parameters that can be specified in the peer's parameter list:
    #  No_TCP; No_SCTP; No_IP; No_IPv6; Prefer_TCP; TLS_old_method;
    #  No_TLS;       # assume transparent security instead of TLS. DTLS is not supported yet (will change in future versions).
    #  Port = 5868;  # The port to connect to
    #  TcTimer = 30;
    #  TwTimer = 30;
    #  ConnectTo = "202.249.37.5";
    #  ConnectTo = "2001:200:903:2::202:1";
    #  TLS_Prio = "NORMAL";
    #  Realm = "realm.net"; # Reject the peer if it does not advertise this realm.
    # Examples:
    #ConnectPeer = "aaa.wide.ad.jp";
    #ConnectPeer = "old.diameter.serv" { TcTimer = 60; TLS_old_method; No_SCTP; Port=3868; } ;
    ConnectPeer = "mme.localdomain" { ConnectTo = "open5gs-mme-frdi"; TcTimer = 60; TwTimer = 30; No_TLS; Port=3868; };
---
# Source: open5gs/charts/hss/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-hss
  labels:
    app.kubernetes.io/name: hss
    helm.sh/chart: hss-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  hss.yaml: |
    logger:
      level: info
    parameter: {}
    
    hss:
      freeDiameter: hss.conf
---
# Source: open5gs/charts/mme/templates/configmap-diameter.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-mme-diameter
  labels:
    app.kubernetes.io/name: mme
    helm.sh/chart: mme-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  mme.conf: |
    
    # This is a sample configuration file for freeDiameter daemon.
    
    # Most of the options can be omitted, as they default to reasonable values.
    # Only TLS-related options must be configured properly in usual setups.
    
    # It is possible to use "include" keyword to import additional files
    # e.g.: include "/etc/freeDiameter.d/*.conf"
    # This is exactly equivalent as copy & paste the content of the included file(s)
    # where the "include" keyword is found.
    
    
    ##############################################################
    ##  Peer identity and realm
    
    # The Diameter Identity of this daemon.
    # This must be a valid FQDN that resolves to the local host.
    # Default: hostname's FQDN
    #Identity = "aaa.koganei.freediameter.net";
    Identity = "mme.localdomain";
    
    # The Diameter Realm of this daemon.
    # Default: the domain part of Identity (after the first dot).
    #Realm = "koganei.freediameter.net";
    Realm = "localdomain";
    
    ##############################################################
    ##  Transport protocol configuration
    
    # The port this peer is listening on for incoming connections (TCP and SCTP).
    # Default: 3868. Use 0 to disable.
    Port = 3868;
    
    # The port this peer is listening on for incoming TLS-protected connections (TCP and SCTP).
    # See TLS_old_method for more information about TLS flavours.
    # Note: we use TLS/SCTP instead of DTLS/SCTP at the moment. This will change in future version of freeDiameter.
    # Default: 5868. Use 0 to disable.
    #SecPort = 5868;
    
    # Use RFC3588 method for TLS protection, where TLS is negociated after CER/CEA exchange is completed
    # on the unsecure connection. The alternative is RFC6733 mechanism, where TLS protects also the
    # CER/CEA exchange on a dedicated secure port.
    # This parameter only affects outgoing connections.
    # The setting can be also defined per-peer (see Peers configuration section).
    # Default: use RFC6733 method with separate port for TLS.
    #TLS_old_method;
    
    # Disable use of TCP protocol (only listen and connect over SCTP)
    # Default : TCP enabled
    #No_TCP;
    
    # Disable use of SCTP protocol (only listen and connect over TCP)
    # Default : SCTP enabled
    #No_SCTP;
    # This option is ignored if freeDiameter is compiled with DISABLE_SCTP option.
    
    # Prefer TCP instead of SCTP for establishing new connections.
    # This setting may be overwritten per peer in peer configuration blocs.
    # Default : SCTP is attempted first.
    #Prefer_TCP;
    
    # Default number of streams per SCTP associations.
    # This setting may be overwritten per peer basis.
    # Default : 30 streams
    #SCTP_streams = 30;
    
    ##############################################################
    ##  Endpoint configuration
    
    # Disable use of IP addresses (only IPv6)
    # Default : IP enabled
    #No_IP;
    
    # Disable use of IPv6 addresses (only IP)
    # Default : IPv6 enabled
    #No_IPv6;
    
    # Specify local addresses the server must bind to
    # Default : listen on all addresses available.
    #ListenOn = "202.249.37.5";
    #ListenOn = "2001:200:903:2::202:1";
    #ListenOn = "fe80::21c:5ff:fe98:7d62%eth0";
    #ListenOn = "127.0.0.2";
    
    
    ##############################################################
    ##  Server configuration
    
    # How many Diameter peers are allowed to be connecting at the same time ?
    # This parameter limits the number of incoming connections from the time
    # the connection is accepted until the first CER is received.
    # Default: 5 unidentified clients in paralel.
    #ThreadsPerServer = 5;
    
    ##############################################################
    ##  TLS Configuration
    
    # TLS is managed by the GNUTLS library in the freeDiameter daemon.
    # You may find more information about parameters and special behaviors
    # in the relevant documentation.
    # http://www.gnu.org/software/gnutls/manual/
    
    # Credentials of the local peer
    # The X509 certificate and private key file to use for the local peer.
    # The files must contain PKCS-1 encoded RSA key, in PEM format.
    # (These parameters are passed to gnutls_certificate_set_x509_key_file function)
    # Default : NO DEFAULT
    #TLS_Cred = "<x509 certif file.PEM>" , "<x509 private key file.PEM>";
    #TLS_Cred = "/etc/ssl/certs/freeDiameter.pem", "/etc/ssl/private/freeDiameter.key";
    TLS_Cred = "/opt/open5gs/etc/open5gs/tls/mme.crt", "/opt/open5gs/etc/open5gs/tls/mme.key";
    
    # Certificate authority / trust anchors
    # The file containing the list of trusted Certificate Authorities (PEM list)
    # (This parameter is passed to gnutls_certificate_set_x509_trust_file function)
    # The directive can appear several times to specify several files.
    # Default : GNUTLS default behavior
    #TLS_CA = "<file.PEM>";
    TLS_CA = "/opt/open5gs/etc/open5gs/tls/ca.crt";
    
    # Certificate Revocation List file
    # The information about revoked certificates.
    # The file contains a list of trusted CRLs in PEM format. They should have been verified before.
    # (This parameter is passed to gnutls_certificate_set_x509_crl_file function)
    # Note: openssl CRL format might have interoperability issue with GNUTLS format.
    # Default : GNUTLS default behavior
    #TLS_CRL = "<file.PEM>";
    
    # GNU TLS Priority string
    # This string allows to configure the behavior of GNUTLS key exchanges
    # algorithms. See gnutls_priority_init function documentation for information.
    # You should also refer to the Diameter required TLS support here:
    #   http://tools.ietf.org/html/rfc6733#section-13.1
    # Default : "NORMAL"
    # Example: TLS_Prio = "NONE:+VERS-TLS1.1:+AES-128-CBC:+RSA:+SHA1:+COMP-NULL";
    #TLS_Prio = "NORMAL";
    
    # Diffie-Hellman parameters size
    # Set the number of bits for generated DH parameters
    # Valid value should be 768, 1024, 2048, 3072 or 4096.
    # (This parameter is passed to gnutls_dh_params_generate2 function,
    # it usually should match RSA key size)
    # Default : 1024
    #TLS_DH_Bits = 1024;
    
    # Alternatively, you can specify a file to load the PKCS#3 encoded
    # DH parameters directly from. This accelerates the daemon start
    # but is slightly less secure. If this file is provided, the
    # TLS_DH_Bits parameters has no effect.
    # Default : no default.
    #TLS_DH_File = "<file.PEM>";
    
    
    ##############################################################
    ##  Timers configuration
    
    # The Tc timer of this peer.
    # It is the delay before a new attempt is made to reconnect a disconnected peer.
    # The value is expressed in seconds. The recommended value is 30 seconds.
    # Default: 30
    #TcTimer = 30;
    
    # The Tw timer of this peer.
    # It is the delay before a watchdog message is sent, as described in RFC 3539.
    # The value is expressed in seconds. The default value is 30 seconds. Value must
    # be greater or equal to 6 seconds. See details in the RFC.
    # Default: 30
    #TwTimer = 30;
    
    ##############################################################
    ##  Applications configuration
    
    # Disable the relaying of Diameter messages?
    # For messages not handled locally, the default behavior is to forward the
    # message to another peer if any is available, according to the routing
    # algorithms. In addition the "0xffffff" application is advertised in CER/CEA
    # exchanges.
    # Default: Relaying is enabled.
    #NoRelay;
    
    # Number of server threads that can handle incoming messages at the same time.
    # Default: 4
    #AppServThreads = 4;
    
    # Other applications are configured by loaded extensions.
    
    ##############################################################
    ##  Extensions configuration
    
    #  The freeDiameter framework merely provides support for
    # Diameter Base Protocol. The specific application behaviors,
    # as well as advanced functions, are provided
    # by loadable extensions (plug-ins).
    #  These extensions may in addition receive the name of a
    # configuration file, the format of which is extension-specific.
    #
    # Format:
    #LoadExtension = "/path/to/extension" [ : "/optional/configuration/file" ] ;
    #
    # Examples:
    #LoadExtension = "extensions/sample.fdx";
    #LoadExtension = "extensions/sample.fdx":"conf/sample.conf";
    
    # Extensions are named as follow:
    # dict_* for extensions that add content to the dictionary definitions.
    # dbg_*  for extensions useful only to retrieve more information on the framework execution.
    # acl_*  : Access control list, to control which peers are allowed to connect.
    # rt_*   : routing extensions that impact how messages are forwarded to other peers.
    # app_*  : applications, these extensions usually register callbacks to handle specific messages.
    # test_* : dummy extensions that are useful only in testing environments.
    
    
    # The dbg_msg_dump.fdx extension allows you to tweak the way freeDiameter displays some
    # information about some events. This extension does not actually use a configuration file
    # but receives directly a parameter in the string passed to the extension. Here are some examples:
    ## LoadExtension = "dbg_msg_dumps.fdx" : "0x1111"; # Removes all default hooks, very quiet even in case of errors.
    ## LoadExtension = "dbg_msg_dumps.fdx" : "0x2222"; # Display all events with few details.
    ## LoadExtension = "dbg_msg_dumps.fdx" : "0x0080"; # Dump complete information about sent and received messages.
    # The four digits respectively control: connections, routing decisions, sent/received messages, errors.
    # The values for each digit are:
    #  0 - default - keep the default behavior
    #  1 - quiet   - remove any specific log
    #  2 - compact - display only a summary of the information
    #  4 - full    - display the complete information on a single long line
    #  8 - tree    - display the complete information in an easier to read format spanning several lines.
    
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dbg_msg_dumps.fdx" : "0x8888";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_rfc5777.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_mip6i.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_nasreq.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_nas_mipv6.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_dcca.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_dcca_3gpp.fdx";
    
    
    ##############################################################
    ##  Peers configuration
    
    #  The local server listens for incoming connections. By default,
    # all unknown connecting peers are rejected. Extensions can override this behavior (e.g., acl_wl).
    #
    #  In addition to incoming connections, the local peer can
    # be configured to establish and maintain connections to some
    # Diameter nodes and allow connections from these nodes.
    #  This is achieved with the ConnectPeer directive described below.
    #
    # Note that the configured Diameter Identity MUST match
    # the information received inside CEA, or the connection will be aborted.
    #
    # Format:
    #ConnectPeer = "diameterid" [ { parameter1; parameter2; ...} ] ;
    # Parameters that can be specified in the peer's parameter list:
    #  No_TCP; No_SCTP; No_IP; No_IPv6; Prefer_TCP; TLS_old_method;
    #  No_TLS;       # assume transparent security instead of TLS. DTLS is not supported yet (will change in future versions).
    #  Port = 5868;  # The port to connect to
    #  TcTimer = 30;
    #  TwTimer = 30;
    #  ConnectTo = "202.249.37.5";
    #  ConnectTo = "2001:200:903:2::202:1";
    #  TLS_Prio = "NORMAL";
    #  Realm = "realm.net"; # Reject the peer if it does not advertise this realm.
    # Examples:
    #ConnectPeer = "aaa.wide.ad.jp";
    #ConnectPeer = "old.diameter.serv" { TcTimer = 60; TLS_old_method; No_SCTP; Port=3868; } ;
    ConnectPeer = "hss.localdomain" { ConnectTo = "open5gs-hss-frdi"; TcTimer = 60; TwTimer = 30; No_TLS; Port=3868; };
---
# Source: open5gs/charts/mme/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-mme
  labels:
    app.kubernetes.io/name: mme
    helm.sh/chart: mme-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  mme.yaml: |
    
    logger:
      level: info
    parameter: {}
    
    mme:
      s1ap:
        - dev: "eth0"
          port: 36412
      gtpc:
        - dev: "eth0"
          port: 2123
      freeDiameter: mme.conf
      gummei:
        -
          mme_code: 1
          mme_gid: 2
          plmn_id:
            mcc: "999"
            mnc: "70"
      tai:
        -
          plmn_id:
            mcc: "999"
            mnc: "70"
          tac:
          - 0
          - 1
          - 2
      security:
        integrity_order : [ EIA2, EIA1, EIA0 ]
        ciphering_order : [ EEA0, EEA1, EEA2 ]
      network_name:
        full: Gradiant
      mme_name: open5gs-mme
    
    sgwc:
      gtpc:
        - name: open5gs-sgwc-gtpc
          port: 2123
    
    smf:
      gtpc:
        - name: open5gs-smf-gtpc
          port: 2123
---
# Source: open5gs/charts/mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-mongodb-common-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        mongosh $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
    else
        mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
    fi
  ping-mongodb.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: open5gs/charts/nrf/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-nrf
  labels:
    app.kubernetes.io/name: nrf
    helm.sh/chart: nrf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  nrf.yaml: |
    logger:
      level: info
    parameter: {}
    
    sbi:
      server:
        no_tls: true
      client:
        no_tls: true
    
    nrf:
      sbi:
        - dev: "eth0"
          port: 7777
---
# Source: open5gs/charts/nssf/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-nssf
  labels:
    app.kubernetes.io/name: nssf
    helm.sh/chart: nssf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  nssf.yaml: |
    
    logger:
      level: info
    parameter: {}
    
    sbi:
      server:
        no_tls: true
      client:
        no_tls: true
    
    nssf:
      sbi:
        - dev: "eth0"
          port: 7777
      nsi:
        - name: open5gs-nrf-sbi
          port: 7777
          s_nssai:
            sst: "1"
            sd: "0x111111"
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 7777
---
# Source: open5gs/charts/pcf/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-pcf
  labels:
    app.kubernetes.io/name: pcf
    helm.sh/chart: pcf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  pcf.yaml: |
    
    logger:
      level: info
    parameter: {}
    
    sbi:
      server:
        no_tls: true
      client:
        no_tls: true
    
    pcf:
      sbi:
        - dev: "eth0"
          port: 7777
      metrics:
        addr: 0.0.0.0
        port: 9090
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 7777
---
# Source: open5gs/charts/pcrf/templates/configmap-diameter.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-pcrf-diameter
  labels:
    app.kubernetes.io/name: pcrf
    helm.sh/chart: pcrf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  pcrf.conf: |
    
    # This is a sample configuration file for freeDiameter daemon.
    
    # Most of the options can be omitted, as they default to reasonable values.
    # Only TLS-related options must be configured properly in usual setups.
    
    # It is possible to use "include" keyword to import additional files
    # e.g.: include "/etc/freeDiameter.d/*.conf"
    # This is exactly equivalent as copy & paste the content of the included file(s)
    # where the "include" keyword is found.
    
    
    ##############################################################
    ##  Peer identity and realm
    
    # The Diameter Identity of this daemon.
    # This must be a valid FQDN that resolves to the local host.
    # Default: hostname's FQDN
    #Identity = "aaa.koganei.freediameter.net";
    Identity = "pcrf.localdomain";
    
    # The Diameter Realm of this daemon.
    # Default: the domain part of Identity (after the first dot).
    #Realm = "koganei.freediameter.net";
    Realm = "localdomain";
    
    ##############################################################
    ##  Transport protocol configuration
    
    # The port this peer is listening on for incoming connections (TCP and SCTP).
    # Default: 3868. Use 0 to disable.
    Port = 3868;
    
    # The port this peer is listening on for incoming TLS-protected connections (TCP and SCTP).
    # See TLS_old_method for more information about TLS flavours.
    # Note: we use TLS/SCTP instead of DTLS/SCTP at the moment. This will change in future version of freeDiameter.
    # Default: 5868. Use 0 to disable.
    #SecPort = 5868;
    
    # Use RFC3588 method for TLS protection, where TLS is negociated after CER/CEA exchange is completed
    # on the unsecure connection. The alternative is RFC6733 mechanism, where TLS protects also the
    # CER/CEA exchange on a dedicated secure port.
    # This parameter only affects outgoing connections.
    # The setting can be also defined per-peer (see Peers configuration section).
    # Default: use RFC6733 method with separate port for TLS.
    #TLS_old_method;
    
    # Disable use of TCP protocol (only listen and connect over SCTP)
    # Default : TCP enabled
    #No_TCP;
    
    # Disable use of SCTP protocol (only listen and connect over TCP)
    # Default : SCTP enabled
    #No_SCTP;
    # This option is ignored if freeDiameter is compiled with DISABLE_SCTP option.
    
    # Prefer TCP instead of SCTP for establishing new connections.
    # This setting may be overwritten per peer in peer configuration blocs.
    # Default : SCTP is attempted first.
    #Prefer_TCP;
    
    # Default number of streams per SCTP associations.
    # This setting may be overwritten per peer basis.
    # Default : 30 streams
    #SCTP_streams = 30;
    
    ##############################################################
    ##  Endpoint configuration
    
    # Disable use of IP addresses (only IPv6)
    # Default : IP enabled
    #No_IP;
    
    # Disable use of IPv6 addresses (only IP)
    # Default : IPv6 enabled
    #No_IPv6;
    
    # Specify local addresses the server must bind to
    # Default : listen on all addresses available.
    #ListenOn = "202.249.37.5";
    #ListenOn = "2001:200:903:2::202:1";
    #ListenOn = "fe80::21c:5ff:fe98:7d62%eth0";
    #ListenOn = "127.0.0.5";
    
    
    ##############################################################
    ##  Server configuration
    
    # How many Diameter peers are allowed to be connecting at the same time ?
    # This parameter limits the number of incoming connections from the time
    # the connection is accepted until the first CER is received.
    # Default: 5 unidentified clients in paralel.
    #ThreadsPerServer = 5;
    
    ##############################################################
    ##  TLS Configuration
    
    # TLS is managed by the GNUTLS library in the freeDiameter daemon.
    # You may find more information about parameters and special behaviors
    # in the relevant documentation.
    # http://www.gnu.org/software/gnutls/manual/
    
    # Credentials of the local peer
    # The X509 certificate and private key file to use for the local peer.
    # The files must contain PKCS-1 encoded RSA key, in PEM format.
    # (These parameters are passed to gnutls_certificate_set_x509_key_file function)
    # Default : NO DEFAULT
    #TLS_Cred = "<x509 certif file.PEM>" , "<x509 private key file.PEM>";
    #TLS_Cred = "/etc/ssl/certs/freeDiameter.pem", "/etc/ssl/private/freeDiameter.key";
    TLS_Cred = "/opt/open5gs/etc/open5gs/tls/pcrf.crt", "/opt/open5gs/etc/open5gs/tls/pcrf.key";
    
    # Certificate authority / trust anchors
    # The file containing the list of trusted Certificate Authorities (PEM list)
    # (This parameter is passed to gnutls_certificate_set_x509_trust_file function)
    # The directive can appear several times to specify several files.
    # Default : GNUTLS default behavior
    #TLS_CA = "<file.PEM>";
    TLS_CA = "/opt/open5gs/etc/open5gs/tls/ca.crt";
    # Certificate Revocation List file
    # The information about revoked certificates.
    # The file contains a list of trusted CRLs in PEM format. They should have been verified before.
    # (This parameter is passed to gnutls_certificate_set_x509_crl_file function)
    # Note: openssl CRL format might have interoperability issue with GNUTLS format.
    # Default : GNUTLS default behavior
    #TLS_CRL = "<file.PEM>";
    
    # GNU TLS Priority string
    # This string allows to configure the behavior of GNUTLS key exchanges
    # algorithms. See gnutls_priority_init function documentation for information.
    # You should also refer to the Diameter required TLS support here:
    #   http://tools.ietf.org/html/rfc6733#section-13.1
    # Default : "NORMAL"
    # Example: TLS_Prio = "NONE:+VERS-TLS1.1:+AES-128-CBC:+RSA:+SHA1:+COMP-NULL";
    #TLS_Prio = "NORMAL";
    
    # Diffie-Hellman parameters size
    # Set the number of bits for generated DH parameters
    # Valid value should be 768, 1024, 2048, 3072 or 4096.
    # (This parameter is passed to gnutls_dh_params_generate2 function,
    # it usually should match RSA key size)
    # Default : 1024
    #TLS_DH_Bits = 1024;
    
    # Alternatively, you can specify a file to load the PKCS#3 encoded
    # DH parameters directly from. This accelerates the daemon start
    # but is slightly less secure. If this file is provided, the
    # TLS_DH_Bits parameters has no effect.
    # Default : no default.
    #TLS_DH_File = "<file.PEM>";
    
    
    ##############################################################
    ##  Timers configuration
    
    # The Tc timer of this peer.
    # It is the delay before a new attempt is made to reconnect a disconnected peer.
    # The value is expressed in seconds. The recommended value is 30 seconds.
    # Default: 30
    #TcTimer = 30;
    
    # The Tw timer of this peer.
    # It is the delay before a watchdog message is sent, as described in RFC 3539.
    # The value is expressed in seconds. The default value is 30 seconds. Value must
    # be greater or equal to 6 seconds. See details in the RFC.
    # Default: 30
    #TwTimer = 30;
    
    ##############################################################
    ##  Applications configuration
    
    # Disable the relaying of Diameter messages?
    # For messages not handled locally, the default behavior is to forward the
    # message to another peer if any is available, according to the routing
    # algorithms. In addition the "0xffffff" application is advertised in CER/CEA
    # exchanges.
    # Default: Relaying is enabled.
    #NoRelay;
    
    # Number of server threads that can handle incoming messages at the same time.
    # Default: 4
    #AppServThreads = 4;
    
    # Other applications are configured by loaded extensions.
    
    ##############################################################
    ##  Extensions configuration
    
    #  The freeDiameter framework merely provides support for
    # Diameter Base Protocol. The specific application behaviors,
    # as well as advanced functions, are provided
    # by loadable extensions (plug-ins).
    #  These extensions may in addition receive the name of a
    # configuration file, the format of which is extension-specific.
    #
    # Format:
    #LoadExtension = "/path/to/extension" [ : "/optional/configuration/file" ] ;
    #
    # Examples:
    #LoadExtension = "extensions/sample.fdx";
    #LoadExtension = "extensions/sample.fdx":"conf/sample.conf";
    
    # Extensions are named as follow:
    # dict_* for extensions that add content to the dictionary definitions.
    # dbg_*  for extensions useful only to retrieve more information on the framework execution.
    # acl_*  : Access control list, to control which peers are allowed to connect.
    # rt_*   : routing extensions that impact how messages are forwarded to other peers.
    # app_*  : applications, these extensions usually register callbacks to handle specific messages.
    # test_* : dummy extensions that are useful only in testing environments.
    
    
    # The dbg_msg_dump.fdx extension allows you to tweak the way freeDiameter displays some
    # information about some events. This extension does not actually use a configuration file
    # but receives directly a parameter in the string passed to the extension. Here are some examples:
    ## LoadExtension = "dbg_msg_dumps.fdx" : "0x1111"; # Removes all default hooks, very quiet even in case of errors.
    ## LoadExtension = "dbg_msg_dumps.fdx" : "0x2222"; # Display all events with few details.
    ## LoadExtension = "dbg_msg_dumps.fdx" : "0x0080"; # Dump complete information about sent and received messages.
    # The four digits respectively control: connections, routing decisions, sent/received messages, errors.
    # The values for each digit are:
    #  0 - default - keep the default behavior
    #  1 - quiet   - remove any specific log
    #  2 - compact - display only a summary of the information
    #  4 - full    - display the complete information on a single long line
    #  8 - tree    - display the complete information in an easier to read format spanning several lines.
    
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dbg_msg_dumps.fdx" : "0x8888";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_rfc5777.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_mip6i.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_nasreq.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_nas_mipv6.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_dcca.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_dcca_3gpp.fdx";
    
    
    ##############################################################
    ##  Peers configuration
    
    #  The local server listens for incoming connections. By default,
    # all unknown connecting peers are rejected. Extensions can override this behavior (e.g., acl_wl).
    #
    #  In addition to incoming connections, the local peer can
    # be configured to establish and maintain connections to some
    # Diameter nodes and allow connections from these nodes.
    #  This is achieved with the ConnectPeer directive described below.
    #
    # Note that the configured Diameter Identity MUST match
    # the information received inside CEA, or the connection will be aborted.
    #
    # Format:
    #ConnectPeer = "diameterid" [ { parameter1; parameter2; ...} ] ;
    # Parameters that can be specified in the peer's parameter list:
    #  No_TCP; No_SCTP; No_IP; No_IPv6; Prefer_TCP; TLS_old_method;
    #  No_TLS;       # assume transparent security instead of TLS. DTLS is not supported yet (will change in future versions).
    #  Port = 5868;  # The port to connect to
    #  TcTimer = 30;
    #  TwTimer = 30;
    #  ConnectTo = "202.249.37.5";
    #  ConnectTo = "2001:200:903:2::202:1";
    #  TLS_Prio = "NORMAL";
    #  Realm = "realm.net"; # Reject the peer if it does not advertise this realm.
    # Examples:
    #ConnectPeer = "aaa.wide.ad.jp";
    #ConnectPeer = "old.diameter.serv" { TcTimer = 60; TLS_old_method; No_SCTP; Port=3868; } ;
    ConnectPeer = "smf.localdomain" { ConnectTo = "open5gs-smf-frdi"; TcTimer = 60; TwTimer = 30; No_TLS; Port=3868; };
---
# Source: open5gs/charts/pcrf/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-pcrf
  labels:
    app.kubernetes.io/name: pcrf
    helm.sh/chart: pcrf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  pcrf.yaml: |
    logger:
      level: info
    parameter: {}
    
    pcrf:
      freeDiameter: pcrf.conf
---
# Source: open5gs/charts/sgwc/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-sgwc
  labels:
    app.kubernetes.io/name: sgwc
    helm.sh/chart: sgwc-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  sgwc.yaml: |
    
    
    logger:
      level: info
    parameter: {}
    
    sgwc:
      pfcp:
        - dev: "eth0"
          port: 8805
      gtpc:
        - dev: "eth0"
          port: 2123
    sgwu:
      pfcp:
        - name: open5gs-sgwu-pfcp
          port: 8805
          apn: [internet]
---
# Source: open5gs/charts/sgwu/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-sgwu
  labels:
    app.kubernetes.io/name: sgwu
    helm.sh/chart: sgwu-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  sgwu.yaml: |
    
    
    logger:
      level: info
    parameter: {}
    
    sgwu:
      pfcp:
        - dev: "eth0"
          port: 8805
      gtpu:
        - dev:  eth0
          port: 2152
    
    sgwc:
      pfcp:
        - name: open5gs-sgwc-pfcp
          port: 8805
---
# Source: open5gs/charts/smf/templates/configmap-diameter.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-smf-diameter
  labels:
    app.kubernetes.io/name: smf
    helm.sh/chart: smf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  smf.conf: |
    
    # This is a sample configuration file for freeDiameter daemon.
    
    # Most of the options can be omitted, as they default to reasonable values.
    # Only TLS-related options must be configured properly in usual setups.
    
    # It is possible to use "include" keyword to import additional files
    # e.g.: include "/etc/freeDiameter.d/*.conf"
    # This is exactly equivalent as copy & paste the content of the included file(s)
    # where the "include" keyword is found.
    
    
    ##############################################################
    ##  Peer identity and realm
    
    # The Diameter Identity of this daemon.
    # This must be a valid FQDN that resolves to the local host.
    # Default: hostname's FQDN
    #Identity = "aaa.koganei.freediameter.net";
    Identity = "smf.localdomain";
    
    # The Diameter Realm of this daemon.
    # Default: the domain part of Identity (after the first dot).
    #Realm = "koganei.freediameter.net";
    Realm = "localdomain";
    
    ##############################################################
    ##  Transport protocol configuration
    
    # The port this peer is listening on for incoming connections (TCP and SCTP).
    # Default: 3868. Use 0 to disable.
    Port = 3868;
    
    # The port this peer is listening on for incoming TLS-protected connections (TCP and SCTP).
    # See TLS_old_method for more information about TLS flavours.
    # Note: we use TLS/SCTP instead of DTLS/SCTP at the moment. This will change in future version of freeDiameter.
    # Default: 5868. Use 0 to disable.
    #SecPort = 5868;
    
    # Use RFC3588 method for TLS protection, where TLS is negociated after CER/CEA exchange is completed
    # on the unsecure connection. The alternative is RFC6733 mechanism, where TLS protects also the
    # CER/CEA exchange on a dedicated secure port.
    # This parameter only affects outgoing connections.
    # The setting can be also defined per-peer (see Peers configuration section).
    # Default: use RFC6733 method with separate port for TLS.
    #TLS_old_method;
    
    # Disable use of TCP protocol (only listen and connect over SCTP)
    # Default : TCP enabled
    #No_TCP;
    
    # Disable use of SCTP protocol (only listen and connect over TCP)
    # Default : SCTP enabled
    #No_SCTP;
    #No_SCTP;
    # This option is ignored if freeDiameter is compiled with DISABLE_SCTP option.
    
    # Prefer TCP instead of SCTP for establishing new connections.
    # This setting may be overwritten per peer in peer configuration blocs.
    # Default : SCTP is attempted first.
    #Prefer_TCP;
    
    # Default number of streams per SCTP associations.
    # This setting may be overwritten per peer basis.
    # Default : 30 streams
    #SCTP_streams = 30;
    
    ##############################################################
    ##  Endpoint configuration
    
    # Disable use of IP addresses (only IPv6)
    # Default : IP enabled
    #No_IP;
    
    # Disable use of IPv6 addresses (only IP)
    # Default : IPv6 enabled
    #No_IPv6;
    
    # Specify local addresses the server must bind to
    # Default : listen on all addresses available.
    #ListenOn = "202.249.37.5";
    #ListenOn = "2001:200:903:2::202:1";
    #ListenOn = "fe80::21c:5ff:fe98:7d62%eth0";
    #ListenOn = "127.0.0.3";
    
    
    ##############################################################
    ##  Server configuration
    
    # How many Diameter peers are allowed to be connecting at the same time ?
    # This parameter limits the number of incoming connections from the time
    # the connection is accepted until the first CER is received.
    # Default: 5 unidentified clients in paralel.
    #ThreadsPerServer = 5;
    
    ##############################################################
    ##  TLS Configuration
    
    # TLS is managed by the GNUTLS library in the freeDiameter daemon.
    # You may find more information about parameters and special behaviors
    # in the relevant documentation.
    # http://www.gnu.org/software/gnutls/manual/
    
    # Credentials of the local peer
    # The X509 certificate and private key file to use for the local peer.
    # The files must contain PKCS-1 encoded RSA key, in PEM format.
    # (These parameters are passed to gnutls_certificate_set_x509_key_file function)
    # Default : NO DEFAULT
    #TLS_Cred = "<x509 certif file.PEM>" , "<x509 private key file.PEM>";
    #TLS_Cred = "/etc/ssl/certs/freeDiameter.pem", "/etc/ssl/private/freeDiameter.key";
    TLS_Cred = "/opt/open5gs/etc/open5gs/tls/smf.crt", "/opt/open5gs/etc/open5gs/tls/smf.key";
    
    # Certificate authority / trust anchors
    # The file containing the list of trusted Certificate Authorities (PEM list)
    # (This parameter is passed to gnutls_certificate_set_x509_trust_file function)
    # The directive can appear several times to specify several files.
    # Default : GNUTLS default behavior
    #TLS_CA = "<file.PEM>";
    TLS_CA = "/opt/open5gs/etc/open5gs/tls/ca.crt";
    
    # Certificate Revocation List file
    # The information about revoked certificates.
    # The file contains a list of trusted CRLs in PEM format. They should have been verified before.
    # (This parameter is passed to gnutls_certificate_set_x509_crl_file function)
    # Note: openssl CRL format might have interoperability issue with GNUTLS format.
    # Default : GNUTLS default behavior
    #TLS_CRL = "<file.PEM>";
    
    # GNU TLS Priority string
    # This string allows to configure the behavior of GNUTLS key exchanges
    # algorithms. See gnutls_priority_init function documentation for information.
    # You should also refer to the Diameter required TLS support here:
    #   http://tools.ietf.org/html/rfc6733#section-13.1
    # Default : "NORMAL"
    # Example: TLS_Prio = "NONE:+VERS-TLS1.1:+AES-128-CBC:+RSA:+SHA1:+COMP-NULL";
    #TLS_Prio = "NORMAL";
    
    # Diffie-Hellman parameters size
    # Set the number of bits for generated DH parameters
    # Valid value should be 768, 1024, 2048, 3072 or 4096.
    # (This parameter is passed to gnutls_dh_params_generate2 function,
    # it usually should match RSA key size)
    # Default : 1024
    #TLS_DH_Bits = 1024;
    
    # Alternatively, you can specify a file to load the PKCS#3 encoded
    # DH parameters directly from. This accelerates the daemon start
    # but is slightly less secure. If this file is provided, the
    # TLS_DH_Bits parameters has no effect.
    # Default : no default.
    #TLS_DH_File = "<file.PEM>";
    
    
    ##############################################################
    ##  Timers configuration
    
    # The Tc timer of this peer.
    # It is the delay before a new attempt is made to reconnect a disconnected peer.
    # The value is expressed in seconds. The recommended value is 30 seconds.
    # Default: 30
    #TcTimer = 30;
    
    # The Tw timer of this peer.
    # It is the delay before a watchdog message is sent, as described in RFC 3539.
    # The value is expressed in seconds. The default value is 30 seconds. Value must
    # be greater or equal to 6 seconds. See details in the RFC.
    # Default: 30
    #TwTimer = 30;
    
    ##############################################################
    ##  Applications configuration
    
    # Disable the relaying of Diameter messages?
    # For messages not handled locally, the default behavior is to forward the
    # message to another peer if any is available, according to the routing
    # algorithms. In addition the "0xffffff" application is advertised in CER/CEA
    # exchanges.
    # Default: Relaying is enabled.
    #NoRelay;
    
    # Number of server threads that can handle incoming messages at the same time.
    # Default: 4
    #AppServThreads = 4;
    
    # Other applications are configured by loaded extensions.
    
    ##############################################################
    ##  Extensions configuration
    
    #  The freeDiameter framework merely provides support for
    # Diameter Base Protocol. The specific application behaviors,
    # as well as advanced functions, are provided
    # by loadable extensions (plug-ins).
    #  These extensions may in addition receive the name of a
    # configuration file, the format of which is extension-specific.
    #
    # Format:
    #LoadExtension = "/path/to/extension" [ : "/optional/configuration/file" ] ;
    #
    # Examples:
    #LoadExtension = "extensions/sample.fdx";
    #LoadExtension = "extensions/sample.fdx":"conf/sample.conf";
    
    # Extensions are named as follow:
    # dict_* for extensions that add content to the dictionary definitions.
    # dbg_*  for extensions useful only to retrieve more information on the framework execution.
    # acl_*  : Access control list, to control which peers are allowed to connect.
    # rt_*   : routing extensions that impact how messages are forwarded to other peers.
    # app_*  : applications, these extensions usually register callbacks to handle specific messages.
    # test_* : dummy extensions that are useful only in testing environments.
    
    
    # The dbg_msg_dump.fdx extension allows you to tweak the way freeDiameter displays some
    # information about some events. This extension does not actually use a configuration file
    # but receives directly a parameter in the string passed to the extension. Here are some examples:
    ## LoadExtension = "dbg_msg_dumps.fdx" : "0x1111"; # Removes all default hooks, very quiet even in case of errors.
    ## LoadExtension = "dbg_msg_dumps.fdx" : "0x2222"; # Display all events with few details.
    ## LoadExtension = "dbg_msg_dumps.fdx" : "0x0080"; # Dump complete information about sent and received messages.
    # The four digits respectively control: connections, routing decisions, sent/received messages, errors.
    # The values for each digit are:
    #  0 - default - keep the default behavior
    #  1 - quiet   - remove any specific log
    #  2 - compact - display only a summary of the information
    #  4 - full    - display the complete information on a single long line
    #  8 - tree    - display the complete information in an easier to read format spanning several lines.
    
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dbg_msg_dumps.fdx" : "0x8888";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_rfc5777.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_mip6i.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_nasreq.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_nas_mipv6.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_dcca.fdx";
    LoadExtension = "/opt/open5gs/lib/x86_64-linux-gnu/freeDiameter/dict_dcca_3gpp.fdx";
    
    
    ##############################################################
    ##  Peers configuration
    
    #  The local server listens for incoming connections. By default,
    # all unknown connecting peers are rejected. Extensions can override this behavior (e.g., acl_wl).
    #
    #  In addition to incoming connections, the local peer can
    # be configured to establish and maintain connections to some
    # Diameter nodes and allow connections from these nodes.
    #  This is achieved with the ConnectPeer directive described below.
    #
    # Note that the configured Diameter Identity MUST match
    # the information received inside CEA, or the connection will be aborted.
    #
    # Format:
    #ConnectPeer = "diameterid" [ { parameter1; parameter2; ...} ] ;
    # Parameters that can be specified in the peer's parameter list:
    #  No_TCP; No_SCTP; No_IP; No_IPv6; Prefer_TCP; TLS_old_method;
    #  No_TLS;       # assume transparent security instead of TLS. DTLS is not supported yet (will change in future versions).
    #  Port = 5868;  # The port to connect to
    #  TcTimer = 30;
    #  TwTimer = 30;
    #  ConnectTo = "202.249.37.5";
    #  ConnectTo = "2001:200:903:2::202:1";
    #  TLS_Prio = "NORMAL";
    #  Realm = "realm.net"; # Reject the peer if it does not advertise this realm.
    # Examples:
    #ConnectPeer = "aaa.wide.ad.jp";
    #ConnectPeer = "old.diameter.serv" { TcTimer = 60; TLS_old_method; No_SCTP; Port=3868; } ;
    #ConnectPeer = "pcrf.openverso" { ConnectTo = "${PCRF_HOSTNAME}"; No_TLS; };
    ConnectPeer = "pcrf.localdomain" { ConnectTo = "open5gs-pcrf-frdi"; TcTimer = 60; TwTimer = 30; No_TLS; Port=3868; };
---
# Source: open5gs/charts/smf/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-smf
  labels:
    app.kubernetes.io/name: smf
    helm.sh/chart: smf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  smf.yaml: |
    
    
    logger:
      level: info
    parameter: {}
    
    sbi:
      server:
        no_tls: true
      client:
        no_tls: true
    
    smf:
      freeDiameter: smf.conf
      sbi:
        - dev: "eth0"
          port: 7777
      pfcp:
        - dev: "eth0"
          port: 8805
      metrics:
        addr: 0.0.0.0
        port: 9090
      gtpc:
        - dev: "eth0"
          port: 2123
      gtpu:
        - dev: "eth0"
          port: 2152
      subnet:
        -
          addr: 10.45.0.1/16
          dnn: internet
      dns:
        -
          8.8.8.8
        -
          8.8.4.4
        -
          2001:4860:4860::8888
        -
          2001:4860:4860::8844
      mtu: 1400
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 7777
    upf:
      pfcp:
        - name: open5gs-upf-pfcp
          port: 8805
---
# Source: open5gs/charts/udm/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-udm
  labels:
    app.kubernetes.io/name: udm
    helm.sh/chart: udm-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  udm.yaml: |
    
    logger:
      level: info
    parameter: {}
    
    sbi:
      server:
        no_tls: true
      client:
        no_tls: true
    
    udm:
      sbi:
        - dev: "eth0"
          port: 7777
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 7777
---
# Source: open5gs/charts/udr/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-udr
  labels:
    app.kubernetes.io/name: udr
    helm.sh/chart: udr-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  udr.yaml: |
    
    logger:
      level: info
    parameter: {}
    
    sbi:
      server:
        no_tls: true
      client:
        no_tls: true
    
    udr:
      sbi:
        - dev: "eth0"
          port: 7777
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 7777
---
# Source: open5gs/charts/upf/templates/configmap-entrypoint.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-upf-entrypoint
  labels:
    app.kubernetes.io/name: upf
    helm.sh/chart: upf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  k8s-entrypoint.sh: |
    #!/bin/bash
    set -e
    
    echo "Executing k8s customized entrypoint.sh"
    echo "Creating net device ogstun"
    if grep "ogstun" /proc/net/dev > /dev/null; then
        echo "Warnin: Net device ogstun already exists! may you need to set createDev: false";
        exit 1
    fi
    
    ip tuntap add name ogstun mode tun
    ip link set ogstun up
    echo "Setting IP 10.45.0.1/16 to device ogstun"
    ip addr add 10.45.0.1/16 dev ogstun;
    sysctl -w net.ipv4.ip_forward=1;
    echo "Enable NAT for 10.45.0.1/16 and device ogstun"
    iptables -t nat -A POSTROUTING -s 10.45.0.1/16 ! -o ogstun -j MASQUERADE;
    
    $@
---
# Source: open5gs/charts/upf/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-upf
  labels:
    app.kubernetes.io/name: upf
    helm.sh/chart: upf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  upf.yaml: |
    
    
    logger:
      level: info
    parameter: {}
    
    upf:
      pfcp:
        - dev: "eth0"
          port: 8805
      gtpu:
        - dev: eth0
          port: 2152
      subnet:
        -
          addr: 10.45.0.1/16
          dev: ogstun
          dnn: internet
      metrics:
        addr: 0.0.0.0
        port: 9090
    
    smf:
      pfcp:
        - name: open5gs-smf-pfcp
          port: 8805
---
# Source: open5gs/charts/webui/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-webui
  labels:
    app.kubernetes.io/name: webui
    helm.sh/chart: webui-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
data:
  add_admin.sh: |-
    #!/bin/bash
    
    set -e
    
    echo "add admin user with password 1423 if no users"
    
    cat << EOF > /tmp/account.js
    db = db.getSiblingDB('open5gs')
    cursor = db.accounts.find()
    if ( cursor.count() == 0 ) {
        db.accounts.insert({ salt: 'f5c15fa72622d62b6b790aa8569b9339729801ab8bda5d13997b5db6bfc1d997', hash: '402223057db5194899d2e082aeb0802f6794622e1cbc47529c419e5a603f2cc592074b4f3323b239ffa594c8b756d5c70a4e1f6ecd3f9f0d2d7328c4cf8b1b766514effff0350a90b89e21eac54cd4497a169c0c7554a0e2cd9b672e5414c323f76b8559bc768cba11cad2ea3ae704fb36abc8abc2619231ff84ded60063c6e1554a9777a4a464ef9cfdfa90ecfdacc9844e0e3b2f91b59d9ff024aec4ea1f51b703a31cda9afb1cc2c719a09cee4f9852ba3cf9f07159b1ccf8133924f74df770b1a391c19e8d67ffdcbbef4084a3277e93f55ac60d80338172b2a7b3f29cfe8a36738681794f7ccbe9bc98f8cdeded02f8a4cd0d4b54e1d6ba3d11792ee0ae8801213691848e9c5338e39485816bb0f734b775ac89f454ef90992003511aa8cceed58a3ac2c3814f14afaaed39cbaf4e2719d7213f81665564eec02f60ede838212555873ef742f6666cc66883dcb8281715d5c762fb236d72b770257e7e8d86c122bb69028a34cf1ed93bb973b440fa89a23604cd3fefe85fbd7f55c9b71acf6ad167228c79513f5cfe899a2e2cc498feb6d2d2f07354a17ba74cecfbda3e87d57b147e17dcc7f4c52b802a8e77f28d255a6712dcdc1519e6ac9ec593270bfcf4c395e2531a271a841b1adefb8516a07136b0de47c7fd534601b16f0f7a98f1dbd31795feb97da59e1d23c08461cf37d6f2877d0f2e437f07e25015960f63', username: 'admin', roles: [ 'admin' ], "__v" : 0})
    }
    EOF
    
    mongo $DB_URI /tmp/account.js
    rm -f /tmp/account.js
---
# Source: open5gs/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: open5gs-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: open5gs/charts/amf/templates/service-metrics.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-amf-metrics
  namespace: "default"
  labels:
    app.kubernetes.io/name: amf
    helm.sh/chart: amf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/path: /metrics
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: metrics
      port: 9090
      targetPort: metrics
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: amf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/amf/templates/service-ngap.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-amf-ngap
  namespace: "default"
  labels:
    app.kubernetes.io/name: amf
    helm.sh/chart: amf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: ngap
      port: 38412
      targetPort: ngap
      protocol: SCTP
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: amf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/amf/templates/service-sbi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-amf-sbi
  namespace: "default"
  labels:
    app.kubernetes.io/name: amf
    helm.sh/chart: amf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: sbi
      port: 7777
      targetPort: sbi
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: amf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/ausf/templates/service-sbi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-ausf-sbi
  namespace: "default"
  labels:
    app.kubernetes.io/name: ausf
    helm.sh/chart: ausf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: sbi
      port: 7777
      targetPort: sbi
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: ausf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/bsf/templates/service-sbi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-bsf-sbi
  namespace: "default"
  labels:
    app.kubernetes.io/name: bsf
    helm.sh/chart: bsf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: sbi
      port: 7777
      targetPort: sbi
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: bsf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/hss/templates/service-frdi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-hss-frdi
  namespace: "default"
  labels:
    app.kubernetes.io/name: hss
    helm.sh/chart: hss-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: frdi
      port: 3868
      targetPort: frdi
      protocol: SCTP
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: hss
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/mme/templates/service-frdi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-mme-frdi
  namespace: "default"
  labels:
    app.kubernetes.io/name: mme
    helm.sh/chart: mme-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: frdi
      port: 3868
      targetPort: frdi
      protocol: SCTP
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: mme
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/mme/templates/service-gtpc.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-mme-gtpc
  namespace: "default"
  labels:
    app.kubernetes.io/name: mme
    helm.sh/chart: mme-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: gtpc
      port: 2123
      targetPort: gtpc
      protocol: UDP
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: mme
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/mme/templates/service-s1ap.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-mme-s1ap
  namespace: "default"
  labels:
    app.kubernetes.io/name: mme
    helm.sh/chart: mme-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: s1ap
      port: 36412
      targetPort: s1ap
      protocol: SCTP
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: mme
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/component: mongodb
---
# Source: open5gs/charts/nrf/templates/service-sbi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-nrf-sbi
  namespace: "default"
  labels:
    app.kubernetes.io/name: nrf
    helm.sh/chart: nrf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: sbi
      port: 7777
      targetPort: sbi
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: nrf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/nssf/templates/service-sbi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-nssf-sbi
  namespace: "default"
  labels:
    app.kubernetes.io/name: nssf
    helm.sh/chart: nssf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: sbi
      port: 7777
      targetPort: sbi
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: nssf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/pcf/templates/service-metrics.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-pcf-metrics
  namespace: "default"
  labels:
    app.kubernetes.io/name: pcf
    helm.sh/chart: pcf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/path: /metrics
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: metrics
      port: 9090
      targetPort: metrics
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: pcf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/pcf/templates/service-sbi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-pcf-sbi
  namespace: "default"
  labels:
    app.kubernetes.io/name: pcf
    helm.sh/chart: pcf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: sbi
      port: 7777
      targetPort: sbi
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: pcf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/pcrf/templates/service-frdi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-pcrf-frdi
  namespace: "default"
  labels:
    app.kubernetes.io/name: pcrf
    helm.sh/chart: pcrf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: frdi
      port: 3868
      targetPort: frdi
      protocol: SCTP
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: pcrf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/sgwc/templates/service-gtpc.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-sgwc-gtpc
  namespace: "default"
  labels:
    app.kubernetes.io/name: sgwc
    helm.sh/chart: sgwc-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: gtpc
      port: 2123
      protocol: UDP
      targetPort: gtpc
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: sgwc
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/sgwc/templates/service-pfcp.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-sgwc-pfcp
  namespace: "default"
  labels:
    app.kubernetes.io/name: sgwc
    helm.sh/chart: sgwc-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: pfcp
      port: 8805
      protocol: UDP
      targetPort: pfcp
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: sgwc
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/sgwu/templates/service-gtpu.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-sgwu-gtpu
  namespace: "default"
  labels:
    app.kubernetes.io/name: sgwu
    helm.sh/chart: sgwu-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: gtpu
      port: 2152
      protocol: UDP
      targetPort: gtpu
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: sgwu
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/sgwu/templates/service-pfcp.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-sgwu-pfcp
  namespace: "default"
  labels:
    app.kubernetes.io/name: sgwu
    helm.sh/chart: sgwu-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: pfcp
      port: 8805
      protocol: UDP
      targetPort: pfcp
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: sgwu
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/smf/templates/service-frdi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-smf-frdi
  namespace: "default"
  labels:
    app.kubernetes.io/name: smf
    helm.sh/chart: smf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: frdi
      port: 3868
      targetPort: frdi
      protocol: SCTP
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: smf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/smf/templates/service-gtpc.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-smf-gtpc
  namespace: "default"
  labels:
    app.kubernetes.io/name: smf
    helm.sh/chart: smf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: gtpc
      port: 2123
      protocol: UDP
      targetPort: gtpc
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: smf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/smf/templates/service-gtpu.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-smf-gtpu
  namespace: "default"
  labels:
    app.kubernetes.io/name: smf
    helm.sh/chart: smf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: gtpu
      port: 2152
      protocol: UDP
      targetPort: gtpu
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: smf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/smf/templates/service-metrics.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-smf-metrics
  namespace: "default"
  labels:
    app.kubernetes.io/name: smf
    helm.sh/chart: smf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/path: /metrics
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: metrics
      port: 9090
      targetPort: metrics
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: smf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/smf/templates/service-pfcp.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-smf-pfcp
  namespace: "default"
  labels:
    app.kubernetes.io/name: smf
    helm.sh/chart: smf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: pfcp
      port: 8805
      protocol: UDP
      targetPort: pfcp
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: smf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/smf/templates/service-sbi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-smf-sbi
  namespace: "default"
  labels:
    app.kubernetes.io/name: smf
    helm.sh/chart: smf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: sbi
      port: 7777
      targetPort: sbi
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: smf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/udm/templates/service-sbi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-udm-sbi
  namespace: "default"
  labels:
    app.kubernetes.io/name: udm
    helm.sh/chart: udm-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: sbi
      port: 7777
      targetPort: sbi
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: udm
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/udr/templates/service-sbi.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-udr-sbi
  namespace: "default"
  labels:
    app.kubernetes.io/name: udr
    helm.sh/chart: udr-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: sbi
      port: 7777
      targetPort: sbi
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: udr
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/upf/templates/service-gtpu.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-upf-gtpu
  namespace: "default"
  labels:
    app.kubernetes.io/name: upf
    helm.sh/chart: upf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: gtpu
      port: 2152
      protocol: UDP
      targetPort: gtpu
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: upf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/upf/templates/service-metrics.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-upf-metrics
  namespace: "default"
  labels:
    app.kubernetes.io/name: upf
    helm.sh/chart: upf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/path: /metrics
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: metrics
      port: 9090
      targetPort: metrics
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: upf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/upf/templates/service-pfcp.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-upf-pfcp
  namespace: "default"
  labels:
    app.kubernetes.io/name: upf
    helm.sh/chart: upf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: pfcp
      port: 8805
      protocol: UDP
      targetPort: pfcp
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: upf
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/webui/templates/service-http.yaml
apiVersion: v1
kind: Service
metadata:
  name: open5gs-webui
  namespace: "default"
  labels:
    app.kubernetes.io/name: webui
    helm.sh/chart: webui-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 3000
      protocol: TCP
      targetPort: http
      nodePort: null
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: webui
    app.kubernetes.io/instance: open5gs
---
# Source: open5gs/charts/amf/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-amf
  namespace: "default"
  labels:
    app.kubernetes.io/name: amf
    helm.sh/chart: amf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: amf
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: amf
        helm.sh/chart: amf-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: amf
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-amf
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-amfd"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          envFrom:
          ports:
            - name: sbi
              containerPort: 7777
            - name: metrics
              containerPort: 9090
            - name: ngap
              containerPort: 38412
              protocol: SCTP
          livenessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/amf.yaml
              subPath: "amf.yaml"
      volumes:
        - name: config
          configMap:
            name: open5gs-amf
---
# Source: open5gs/charts/ausf/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-ausf
  namespace: "default"
  labels:
    app.kubernetes.io/name: ausf
    helm.sh/chart: ausf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ausf
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ausf
        helm.sh/chart: ausf-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: ausf
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-ausf
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-ausfd"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          envFrom:
          ports:
            - name: sbi
              containerPort: 7777
          livenessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/ausf.yaml
              subPath: "ausf.yaml"
      volumes:
        - name: config
          configMap:
            name: open5gs-ausf
---
# Source: open5gs/charts/bsf/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-bsf
  namespace: "default"
  labels:
    app.kubernetes.io/name: bsf
    helm.sh/chart: bsf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: bsf
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bsf
        helm.sh/chart: bsf-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: bsf
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-bsf
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-bsfd"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          envFrom:
          ports:
            - name: sbi
              containerPort: 7777
          livenessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/bsf.yaml
              subPath: "bsf.yaml"
      volumes:
        - name: config
          configMap:
            name: open5gs-bsf
---
# Source: open5gs/charts/hss/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-hss
  namespace: "default"
  labels:
    app.kubernetes.io/name: hss
    helm.sh/chart: hss-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: hss
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hss
        helm.sh/chart: hss-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: hss
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-hss
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-hssd"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: DB_URI
              value: mongodb://open5gs-mongodb/open5gs
          envFrom:
          ports:
            - name: frdi
              containerPort: 3868
              protocol: SCTP
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: diameter-config
              mountPath: /opt/open5gs/etc/freeDiameter/hss.conf
              subPath: "hss.conf"
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/hss.yaml
              subPath: "hss.yaml"
      volumes:
        - name: diameter-config
          configMap:
            name: open5gs-hss-diameter
        - name: config
          configMap:
            name: open5gs-hss
---
# Source: open5gs/charts/mme/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-mme
  namespace: "default"
  labels:
    app.kubernetes.io/name: mme
    helm.sh/chart: mme-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mme
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mme
        helm.sh/chart: mme-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mme
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-mme
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-mmed"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          envFrom:
          ports:
            - name: frdi
              containerPort: 3868
              protocol: SCTP
            - name: s1ap
              containerPort: 36412
              protocol: SCTP
            - name: gtpc
              containerPort: 2123
              protocol: UDP
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: diameter-config
              mountPath: /opt/open5gs/etc/freeDiameter/mme.conf
              subPath: "mme.conf"
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/mme.yaml
              subPath: "mme.yaml"
      volumes:
        - name: diameter-config
          configMap:
            name: open5gs-mme-diameter
        - name: config
          configMap:
            name: open5gs-mme
---
# Source: open5gs/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: open5gs
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-12.1.31
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: open5gs-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: open5gs
                    app.kubernetes.io/component: mongodb
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:5.0.10-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
      volumes:
        - name: common-scripts
          configMap:
            name: open5gs-mongodb-common-scripts
            defaultMode: 0550
        - name: datadir
          persistentVolumeClaim:
            claimName: open5gs-mongodb
---
# Source: open5gs/charts/nrf/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-nrf
  namespace: "default"
  labels:
    app.kubernetes.io/name: nrf
    helm.sh/chart: nrf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nrf
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nrf
        helm.sh/chart: nrf-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: nrf
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-nrf
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-nrfd"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          envFrom:
          ports:
            - name: sbi
              containerPort: 7777
          livenessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/nrf.yaml
              subPath: "nrf.yaml"
      volumes:
        - name: config
          configMap:
            name: open5gs-nrf
---
# Source: open5gs/charts/nssf/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-nssf
  namespace: "default"
  labels:
    app.kubernetes.io/name: nssf
    helm.sh/chart: nssf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nssf
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nssf
        helm.sh/chart: nssf-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: nssf
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-nssf
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-nssfd"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          envFrom:
          ports:
            - name: sbi
              containerPort: 7777
          livenessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/nssf.yaml
              subPath: "nssf.yaml"
      volumes:
        - name: config
          configMap:
            name: open5gs-nssf
---
# Source: open5gs/charts/pcf/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-pcf
  namespace: "default"
  labels:
    app.kubernetes.io/name: pcf
    helm.sh/chart: pcf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: pcf
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pcf
        helm.sh/chart: pcf-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: pcf
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-pcf
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-pcfd"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: DB_URI
              value: mongodb://open5gs-mongodb/open5gs
          envFrom:
          ports:
            - name: sbi
              containerPort: 7777
            - name: metrics
              containerPort: 9090
          livenessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/pcf.yaml
              subPath: "pcf.yaml"
      volumes:
        - name: config
          configMap:
            name: open5gs-pcf
---
# Source: open5gs/charts/pcrf/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-pcrf
  namespace: "default"
  labels:
    app.kubernetes.io/name: pcrf
    helm.sh/chart: pcrf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: pcrf
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pcrf
        helm.sh/chart: pcrf-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: pcrf
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-pcrf
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-pcrfd"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: DB_URI
              value: mongodb://open5gs-mongodb/open5gs
          envFrom:
          ports:
            - name: frdi
              containerPort: 3868
              protocol: SCTP
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: diameter-config
              mountPath: /opt/open5gs/etc/freeDiameter/pcrf.conf
              subPath: "pcrf.conf"
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/pcrf.yaml
              subPath: "pcrf.yaml"
      volumes:
        - name: diameter-config
          configMap:
            name: open5gs-pcrf-diameter
        - name: config
          configMap:
            name: open5gs-pcrf
---
# Source: open5gs/charts/sgwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-sgwc
  namespace: "default"
  labels:
    app.kubernetes.io/name: sgwc
    helm.sh/chart: sgwc-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: sgwc
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sgwc
        helm.sh/chart: sgwc-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: sgwc
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-sgwc
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-sgwcd"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          envFrom:
          ports:
            - name: pfcp
              containerPort: 8805
              protocol: UDP
            - name: gtpc
              containerPort: 2123
              protocol: UDP
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/sgwc.yaml
              subPath: "sgwc.yaml"
      volumes:
        - name: config
          configMap:
            name: open5gs-sgwc
---
# Source: open5gs/charts/sgwu/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-sgwu
  namespace: "default"
  labels:
    app.kubernetes.io/name: sgwu
    helm.sh/chart: sgwu-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: sgwu
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sgwu
        helm.sh/chart: sgwu-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: sgwu
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-sgwu
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-sgwud"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          envFrom:
          ports:
            - name: pfcp
              containerPort: 8805
              protocol: UDP
            - name: gtpu
              containerPort: 2152
              protocol: UDP
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/sgwu.yaml
              subPath: "sgwu.yaml"
      volumes:
        - name: config
          configMap:
            name: open5gs-sgwu
---
# Source: open5gs/charts/smf/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-smf
  namespace: "default"
  labels:
    app.kubernetes.io/name: smf
    helm.sh/chart: smf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: smf
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: smf
        helm.sh/chart: smf-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: smf
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-smf
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-smfd"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          envFrom:
          ports:
            - name: sbi
              containerPort: 7777
            - name: metrics
              containerPort: 9090
            - name: pfcp
              containerPort: 8805
              protocol: UDP
            - name: gtpc
              containerPort: 2123
              protocol: UDP
            - name: gtpu
              containerPort: 2152
              protocol: UDP
            - name: frdi
              containerPort: 3868
              protocol: SCTP
          livenessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: diameter-config
              mountPath: /opt/open5gs/etc/freeDiameter/smf.conf
              subPath: "smf.conf"
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/smf.yaml
              subPath: "smf.yaml"
      volumes:
        - name: diameter-config
          configMap:
            name: open5gs-smf-diameter
        - name: config
          configMap:
            name: open5gs-smf
---
# Source: open5gs/charts/udm/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-udm
  namespace: "default"
  labels:
    app.kubernetes.io/name: udm
    helm.sh/chart: udm-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: udm
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm
        helm.sh/chart: udm-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: udm
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-udm
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-udmd"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          envFrom:
          ports:
            - name: sbi
              containerPort: 7777
          livenessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/udm.yaml
              subPath: "udm.yaml"
      volumes:
        - name: config
          configMap:
            name: open5gs-udm
---
# Source: open5gs/charts/udr/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-udr
  namespace: "default"
  labels:
    app.kubernetes.io/name: udr
    helm.sh/chart: udr-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: udr
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udr
        helm.sh/chart: udr-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: udr
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      containers:
        - name: open5gs-udr
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          args: 
            - "open5gs-udrd"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: DB_URI
              value: mongodb://open5gs-mongodb/open5gs
          envFrom:
          ports:
            - name: sbi
              containerPort: 7777
          livenessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: sbi
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/udr.yaml
              subPath: "udr.yaml"
      volumes:
        - name: config
          configMap:
            name: open5gs-udr
---
# Source: open5gs/charts/upf/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-upf
  namespace: "default"
  labels:
    app.kubernetes.io/name: upf
    helm.sh/chart: upf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: upf
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: upf
        helm.sh/chart: upf-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: upf
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      initContainers:
        - name: tun-create
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          command:
            - "/bin/bash" 
            - "-c"
            - "/k8s-entrypoint.sh"
          securityContext:
            privileged: true
            capabilities:
              add: ["NET_ADMIN"]
          volumeMounts:
            - name: entrypoint
              mountPath:  /k8s-entrypoint.sh
              subPath: k8s-entrypoint.sh
      containers:
        - name: open5gs-upf
          image: docker.io/openverso/open5gs:2.6.4
          imagePullPolicy: "IfNotPresent"
          command:
            - "open5gs-upfd"
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
            runAsNonRoot: false
          envFrom:
          ports:
            - name: pfcp
              containerPort: 8805
              protocol: UDP
            - name: gtpu
              containerPort: 2152
              protocol: UDP
            - name: metrics
              containerPort: 9090
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath:  /opt/open5gs/etc/open5gs/upf.yaml
              subPath: "upf.yaml"
      volumes:
        - name: config
          configMap:
            name: open5gs-upf
        - name: entrypoint
          configMap:
            name: open5gs-upf-entrypoint
            defaultMode: 0777
---
# Source: open5gs/charts/webui/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-webui
  namespace: "default"
  labels:
    app.kubernetes.io/name: webui
    helm.sh/chart: webui-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: webui
      app.kubernetes.io/instance: open5gs
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: webui
        helm.sh/chart: webui-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
            
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: webui
                    app.kubernetes.io/instance: open5gs
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: default
      priorityClassName: ""
      initContainers:
        - name: init
          image: bitnami/mongodb:4.4.1-debian-10-r39
          env:
          - name: DB_URI
            value: mongodb://open5gs-mongodb/open5gs
          command: 
            - /bin/bash
            - /add_admin.sh
          volumeMounts:
          - name: populate
            mountPath: /add_admin.sh
            subPath: add_admin.sh
      containers:
        - name: open5gs-webui
          image: docker.io/openverso/open5gs-webui:2.6.4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: DB_URI
              value: mongodb://open5gs-mongodb/open5gs
          envFrom:
          ports:
            - name: http
              containerPort: 3000
          livenessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: http
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
          # Using tcpSocket instead of httpGet because open5gs only support HTTP/2
            tcpSocket:
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: populate
              mountPath:  /opt/open5gs/etc/open5gs/
      volumes:
        - name: populate
          configMap:
            name: open5gs-webui
---
# Source: open5gs/templates/populate-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open5gs-populate
  namespace: "default"
  labels:
    app.kubernetes.io/name: open5gs
    helm.sh/chart: open5gs-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: populate
spec:
  selector:
    matchLabels: 
      app.kubernetes.io/name: open5gs
      app.kubernetes.io/instance: open5gs
      app.kubernetes.io/component: populate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: open5gs
        helm.sh/chart: open5gs-2.1.0
        app.kubernetes.io/instance: open5gs
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: populate
    spec:
      
      initContainers:
      - name: init
        image: docker.io/openverso/open5gs-dbctl:0.10.2
        imagePullPolicy: 
        env:
        - name: DB_URI
          value: mongodb://open5gs-mongodb/open5gs
        command: 
        - /bin/bash
        - -c
        - ""
      containers:
      - name: populate
        image: docker.io/openverso/open5gs-dbctl:0.10.2
        imagePullPolicy: 
        env:
        - name: DB_URI
          value: mongodb://open5gs-mongodb/open5gs
        command: 
        - /bin/bash
        - -c
        - "tail -f /dev/null"
---
# Source: open5gs/charts/amf/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-amf
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-amf
---
# Source: open5gs/charts/ausf/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-ausf
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-ausf
---
# Source: open5gs/charts/bsf/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-bsf
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-bsf
---
# Source: open5gs/charts/hss/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-hss
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-hss
---
# Source: open5gs/charts/mme/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-mme
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-mme
---
# Source: open5gs/charts/nrf/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-nrf
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-nrf
---
# Source: open5gs/charts/nssf/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-nssf
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-nssf
---
# Source: open5gs/charts/pcf/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-pcf
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-pcf
---
# Source: open5gs/charts/pcrf/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-pcrf
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-pcrf
---
# Source: open5gs/charts/sgwc/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-sgwc
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-sgwc
---
# Source: open5gs/charts/sgwu/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-sgwu
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-sgwu
---
# Source: open5gs/charts/smf/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-smf
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-smf
---
# Source: open5gs/charts/udm/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-udm
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-udm
---
# Source: open5gs/charts/udr/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-udr
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-udr
---
# Source: open5gs/charts/upf/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: open5gs-upf
spec:
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: open5gs-upf
---
# Source: open5gs/charts/webui/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: open5gs-webui
  labels:
    app.kubernetes.io/name: webui
    helm.sh/chart: webui-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  rules:
    - host: open5gs-default.ingress.lab5g.gradiant.org
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend: 
              service:
                name: open5gs-webui
                port: 
                  name: http
---
# Source: open5gs/charts/amf/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: open5gs-amf
  namespace: "default"
  labels:
    app.kubernetes.io/name: amf
    helm.sh/chart: amf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    release: prometheus
    app.kubernetes.io/component: metrics
spec:
  selector:
    matchLabels: 
      app.kubernetes.io/name: amf
      app.kubernetes.io/instance: open5gs
      app.kubernetes.io/component: metrics
  endpoints:
    - port: metrics
      interval: 5s
      honorLabels: false
  namespaceSelector:
    matchNames:
      - "default"
---
# Source: open5gs/charts/pcf/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: open5gs-pcf
  namespace: "default"
  labels:
    app.kubernetes.io/name: pcf
    helm.sh/chart: pcf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
spec:
  selector:
    matchLabels: 
      app.kubernetes.io/name: pcf
      app.kubernetes.io/instance: open5gs
      app.kubernetes.io/component: metrics
  endpoints:
    - port: metrics
      honorLabels: false
  namespaceSelector:
    matchNames:
      - "default"
---
# Source: open5gs/charts/smf/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: open5gs-smf
  namespace: "default"
  labels:
    app.kubernetes.io/name: smf
    helm.sh/chart: smf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
spec:
  selector:
    matchLabels: 
      app.kubernetes.io/name: smf
      app.kubernetes.io/instance: open5gs
      app.kubernetes.io/component: metrics
  endpoints:
    - port: metrics
      honorLabels: false
  namespaceSelector:
    matchNames:
      - "default"
---
# Source: open5gs/charts/upf/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: open5gs-upf
  namespace: "default"
  labels:
    app.kubernetes.io/name: upf
    helm.sh/chart: upf-2.1.0
    app.kubernetes.io/instance: open5gs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
spec:
  selector:
    matchLabels: 
      app.kubernetes.io/name: upf
      app.kubernetes.io/instance: open5gs
      app.kubernetes.io/component: metrics
  endpoints:
    - port: metrics
      honorLabels: false
  namespaceSelector:
    matchNames:
      - "default"

